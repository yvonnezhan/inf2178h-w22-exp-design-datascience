{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Huimin Yvonne Zhan",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#Importing Dataset"
      ],
      "metadata": {
        "id": "pkVgOfolgkYv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Clean Diabetes dataset using tidy data principles. There is not a lot of cleaning necessary but think about what each column means. Do they make sense?\n",
        "\n",
        "2. You will need to wrangle continuous columns into categorical ones that make sense. Make sure you cite why you did what you did.\n",
        "\n",
        "3. Conduct Exploratory Data Analysis using Visualizations and t-tests to test your initial hypotheses/research questions. Your RQs can and will morph and change appropriately as you go through the process of analysis.\n",
        "Conduct Multiple Linear Regression and ANOVA modeling on the dataset. What do each modeling step reveal? Post hoc tests are a must!\n",
        "\n",
        "4. No logistic regression models will be accepted. We are only dealing with categorical data as predictors in this class, not as outcomes.\n",
        "\n",
        "5. I am more concerned with your process than than specific right outcomes (though of course, they are secondarily important)\n",
        "\n",
        "\n",
        "6. Write up: Write in detail the steps that you took to clean the data and why. Justify why you think your model is the right solution. If you feel like there were solutions that you identified but couldn't achieve, please write that out as well. There are no page limits."
      ],
      "metadata": {
        "id": "kclVGGXLhIYI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Importing Dataset\n",
        "from google.colab import files \n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 76
        },
        "id": "Gr7bOzQZZCaD",
        "outputId": "ee33582e-0b57-41e0-c15d-dc1d376563f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-45e4494c-150f-406d-afe6-3fc9a2125dd2\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-45e4494c-150f-406d-afe6-3fc9a2125dd2\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving diabetes.csv to diabetes (2).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import sklearn\n",
        "from scipy import stats\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "%pip install scipy\n",
        "!pip install seaborn"
      ],
      "metadata": {
        "id": "OEzN66U2ZK8U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "47d04933-7575-4417-8606-87ec488f3d60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (1.4.1)\n",
            "Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.7/dist-packages (from scipy) (1.21.5)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.7/dist-packages (0.11.2)\n",
            "Requirement already satisfied: pandas>=0.23 in /usr/local/lib/python3.7/dist-packages (from seaborn) (1.3.5)\n",
            "Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from seaborn) (1.21.5)\n",
            "Requirement already satisfied: matplotlib>=2.2 in /usr/local/lib/python3.7/dist-packages (from seaborn) (3.2.2)\n",
            "Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.7/dist-packages (from seaborn) (1.4.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->seaborn) (1.4.0)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->seaborn) (3.0.7)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->seaborn) (0.11.0)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.2->seaborn) (2.8.2)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib>=2.2->seaborn) (3.10.0.2)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.23->seaborn) (2018.9)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib>=2.2->seaborn) (1.15.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('diabetes.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "l9oFWZA4ZPRn",
        "outputId": "4d0e5a64-be7e-4f2a-fc2b-e675025b8137"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0              6      148             72             35        0  33.6   \n",
              "1              1       85             66             29        0  26.6   \n",
              "2              8      183             64              0        0  23.3   \n",
              "3              1       89             66             23       94  28.1   \n",
              "4              0      137             40             35      168  43.1   \n",
              "..           ...      ...            ...            ...      ...   ...   \n",
              "763           10      101             76             48      180  32.9   \n",
              "764            2      122             70             27        0  36.8   \n",
              "765            5      121             72             23      112  26.2   \n",
              "766            1      126             60              0        0  30.1   \n",
              "767            1       93             70             31        0  30.4   \n",
              "\n",
              "     DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                       0.627   50        1  \n",
              "1                       0.351   31        0  \n",
              "2                       0.672   32        1  \n",
              "3                       0.167   21        0  \n",
              "4                       2.288   33        1  \n",
              "..                        ...  ...      ...  \n",
              "763                     0.171   63        0  \n",
              "764                     0.340   27        0  \n",
              "765                     0.245   30        0  \n",
              "766                     0.349   47        1  \n",
              "767                     0.315   23        0  \n",
              "\n",
              "[768 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e89bbd6f-7c3c-4805-b24a-2bf4d90cfb53\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>763</th>\n",
              "      <td>10</td>\n",
              "      <td>101</td>\n",
              "      <td>76</td>\n",
              "      <td>48</td>\n",
              "      <td>180</td>\n",
              "      <td>32.9</td>\n",
              "      <td>0.171</td>\n",
              "      <td>63</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>764</th>\n",
              "      <td>2</td>\n",
              "      <td>122</td>\n",
              "      <td>70</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>36.8</td>\n",
              "      <td>0.340</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>765</th>\n",
              "      <td>5</td>\n",
              "      <td>121</td>\n",
              "      <td>72</td>\n",
              "      <td>23</td>\n",
              "      <td>112</td>\n",
              "      <td>26.2</td>\n",
              "      <td>0.245</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>766</th>\n",
              "      <td>1</td>\n",
              "      <td>126</td>\n",
              "      <td>60</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.1</td>\n",
              "      <td>0.349</td>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>767</th>\n",
              "      <td>1</td>\n",
              "      <td>93</td>\n",
              "      <td>70</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>30.4</td>\n",
              "      <td>0.315</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>768 rows × 9 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e89bbd6f-7c3c-4805-b24a-2bf4d90cfb53')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e89bbd6f-7c3c-4805-b24a-2bf4d90cfb53 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e89bbd6f-7c3c-4805-b24a-2bf4d90cfb53');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Exploratory Data Analysis"
      ],
      "metadata": {
        "id": "pnK2Eug8rgGt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "DjI-AsO2a8Z5",
        "outputId": "03958dc0-1202-498e-d750-e24b814291d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0            6      148             72             35        0  33.6   \n",
              "1            1       85             66             29        0  26.6   \n",
              "2            8      183             64              0        0  23.3   \n",
              "3            1       89             66             23       94  28.1   \n",
              "4            0      137             40             35      168  43.1   \n",
              "\n",
              "   DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                     0.627   50        1  \n",
              "1                     0.351   31        0  \n",
              "2                     0.672   32        1  \n",
              "3                     0.167   21        0  \n",
              "4                     2.288   33        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7d5934d7-5bc3-41e2-9e0e-d5224a9a6243\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d5934d7-5bc3-41e2-9e0e-d5224a9a6243')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7d5934d7-5bc3-41e2-9e0e-d5224a9a6243 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7d5934d7-5bc3-41e2-9e0e-d5224a9a6243');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#In this dataset, there are 768 obsearvations and 9 characteristics. The 9 characteristics include 1 dependent variable and 8 independent variables.\n",
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MUEmXiHJsCsc",
        "outputId": "3cb57913-8087-4650-90ee-dd8bcaeb98da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(768, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#There is no variable column has null or missing values. \n",
        "#Most columns are integers\n",
        "#BMI and DPF are floats/decimals\n",
        "df.info()"
      ],
      "metadata": {
        "id": "a_20gDmcbfny",
        "outputId": "b371bc83-b4bd-4eda-846f-3feac41d1645",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 768 entries, 0 to 767\n",
            "Data columns (total 9 columns):\n",
            " #   Column                    Non-Null Count  Dtype  \n",
            "---  ------                    --------------  -----  \n",
            " 0   Pregnancies               768 non-null    int64  \n",
            " 1   Glucose                   768 non-null    int64  \n",
            " 2   BloodPressure             768 non-null    int64  \n",
            " 3   SkinThickness             768 non-null    int64  \n",
            " 4   Insulin                   768 non-null    int64  \n",
            " 5   BMI                       768 non-null    float64\n",
            " 6   DiabetesPedigreeFunction  768 non-null    float64\n",
            " 7   Age                       768 non-null    int64  \n",
            " 8   Outcome                   768 non-null    int64  \n",
            "dtypes: float64(2), int64(7)\n",
            "memory usage: 54.1 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Insulin has the greatest mean and variance\n",
        "#Most features shows its minimum value is 0, which probably different from the reality, like IBM, Glucose, Bloodpressure, Insulin are impossible. So there might be some mistakes or anamoly we can further investigage it \n",
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "N4AtORNIfju1",
        "outputId": "905cf20e-7fbb-4e0d-8cd1-7eda2a426055"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
              "count   768.000000  768.000000     768.000000     768.000000  768.000000   \n",
              "mean      3.845052  120.894531      69.105469      20.536458   79.799479   \n",
              "std       3.369578   31.972618      19.355807      15.952218  115.244002   \n",
              "min       0.000000    0.000000       0.000000       0.000000    0.000000   \n",
              "25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n",
              "50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n",
              "75%       6.000000  140.250000      80.000000      32.000000  127.250000   \n",
              "max      17.000000  199.000000     122.000000      99.000000  846.000000   \n",
              "\n",
              "              BMI  DiabetesPedigreeFunction         Age     Outcome  \n",
              "count  768.000000                768.000000  768.000000  768.000000  \n",
              "mean    31.992578                  0.471876   33.240885    0.348958  \n",
              "std      7.884160                  0.331329   11.760232    0.476951  \n",
              "min      0.000000                  0.078000   21.000000    0.000000  \n",
              "25%     27.300000                  0.243750   24.000000    0.000000  \n",
              "50%     32.000000                  0.372500   29.000000    0.000000  \n",
              "75%     36.600000                  0.626250   41.000000    1.000000  \n",
              "max     67.100000                  2.420000   81.000000    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea1e4e3a-bccf-4ce8-8d11-504cae7d175f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.845052</td>\n",
              "      <td>120.894531</td>\n",
              "      <td>69.105469</td>\n",
              "      <td>20.536458</td>\n",
              "      <td>79.799479</td>\n",
              "      <td>31.992578</td>\n",
              "      <td>0.471876</td>\n",
              "      <td>33.240885</td>\n",
              "      <td>0.348958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.369578</td>\n",
              "      <td>31.972618</td>\n",
              "      <td>19.355807</td>\n",
              "      <td>15.952218</td>\n",
              "      <td>115.244002</td>\n",
              "      <td>7.884160</td>\n",
              "      <td>0.331329</td>\n",
              "      <td>11.760232</td>\n",
              "      <td>0.476951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.078000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>27.300000</td>\n",
              "      <td>0.243750</td>\n",
              "      <td>24.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>30.500000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>0.372500</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>140.250000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>127.250000</td>\n",
              "      <td>36.600000</td>\n",
              "      <td>0.626250</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>17.000000</td>\n",
              "      <td>199.000000</td>\n",
              "      <td>122.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>846.000000</td>\n",
              "      <td>67.100000</td>\n",
              "      <td>2.420000</td>\n",
              "      <td>81.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea1e4e3a-bccf-4ce8-8d11-504cae7d175f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ea1e4e3a-bccf-4ce8-8d11-504cae7d175f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ea1e4e3a-bccf-4ce8-8d11-504cae7d175f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#There is no null value\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r-rxrAvNg4yv",
        "outputId": "a9dda405-e6e2-449b-dc8f-6716ff29a1a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pregnancies                   0\n",
              "Glucose                       5\n",
              "BloodPressure                35\n",
              "SkinThickness               227\n",
              "Insulin                     374\n",
              "BMI                          11\n",
              "DiabetesPedigreeFunction      0\n",
              "Age                           0\n",
              "Outcome                       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.skew()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yi_gw70XmqfI",
        "outputId": "15561f0d-24ff-4fd3-d83e-defa71739ee7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pregnancies                 0.901674\n",
              "Glucose                     0.173754\n",
              "BloodPressure              -1.843608\n",
              "SkinThickness               0.109372\n",
              "Insulin                     2.272251\n",
              "BMI                        -0.428982\n",
              "DiabetesPedigreeFunction    1.919911\n",
              "Age                         1.129597\n",
              "Outcome                     0.635017\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.hist()\n",
        "plt.tight_layout()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "kImwiM9mmbhA",
        "outputId": "6a802a58-d551-47e0-e494-f60794a17137"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(df.Outcome)\n",
        "df.Outcome.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "JxfR-houoV3H",
        "outputId": "23489402-671c-4430-efa2-3322b637c437"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    500\n",
              "1    268\n",
              "Name: Outcome, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAPPklEQVR4nO3de6xlZXnH8e8PRsQbcplTijNDx9SxBqMinVCs/cNCa4G2DjVgNCojTjJNSo3Wpi01TW1NTbRVKWhDOimXgVAVr4zGtCWDl9aCelAcbrWMVGQmwIzc1Fpswad/7Pe8bOAAG5l19mHO95Ps7Hc9613rPGdyMr+sy147VYUkSQD7TLsBSdLiYShIkjpDQZLUGQqSpM5QkCR1y6bdwBOxfPnyWr169bTbkKQnlauuuup7VTUz37ondSisXr2a2dnZabchSU8qSW5+pHWePpIkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkrpBQyHJd5Jck+TqJLOtdnCSy5Lc2N4PavUkOTvJ9iTbkhw1ZG+SpIdbiCOFX62qI6tqbVs+A9haVWuArW0Z4ARgTXttBM5ZgN4kSWOmcfpoHbC5jTcDJ43VL6yRK4EDkxw2hf4kacka+hPNBfxLkgL+vqo2AYdW1a1t/W3AoW28ArhlbNsdrXbrWI0kGxkdSXD44Yc/4QZ/8Y8ufML70N7nqr85ddotSFMxdCj8SlXtTPIzwGVJ/mN8ZVVVC4yJtWDZBLB27Vq/Nk6S9qBBTx9V1c72vgv4FHA0cPvcaaH2vqtN3wmsGtt8ZatJkhbIYKGQ5BlJnjU3Bl4JXAtsAda3aeuBS9t4C3BquwvpGOCesdNMkqQFMOTpo0OBTyWZ+zn/WFX/lORrwCVJNgA3A69p8z8HnAhsB34EnDZgb5KkeQwWClV1E/CSeep3AMfNUy/g9KH6kSQ9Nj/RLEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJ3eChkGTfJN9I8tm2/NwkX0myPclHk+zX6k9ty9vb+tVD9yZJerCFOFJ4K3DD2PJ7gTOr6nnAXcCGVt8A3NXqZ7Z5kqQFNGgoJFkJ/CbwD205wLHAx9uUzcBJbbyuLdPWH9fmS5IWyNBHCn8L/DHwk7Z8CHB3Vd3XlncAK9p4BXALQFt/T5v/IEk2JplNMrt79+4he5ekJWewUEjyW8CuqrpqT+63qjZV1dqqWjszM7Mndy1JS96yAff9cuBVSU4E9gcOAM4CDkyyrB0NrAR2tvk7gVXAjiTLgGcDdwzYnyTpIQY7UqiqP62qlVW1GngtcHlVvR74PHBym7YeuLSNt7Rl2vrLq6qG6k+S9HDT+JzCnwBvT7Kd0TWDc1v9XOCQVn87cMYUepOkJW3I00ddVX0B+EIb3wQcPc+ce4FTFqIfSdL8/ESzJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1g4VCkv2TfDXJN5Ncl+QvW/25Sb6SZHuSjybZr9Wf2pa3t/Wrh+pNkjS/IY8UfgwcW1UvAY4Ejk9yDPBe4Myqeh5wF7Chzd8A3NXqZ7Z5kqQFNFgo1MgP2+JT2quAY4GPt/pm4KQ2XteWaeuPS5Kh+pMkPdyg1xSS7JvkamAXcBnwbeDuqrqvTdkBrGjjFcAtAG39PcAhQ/YnSXqwQUOhqu6vqiOBlcDRwAue6D6TbEwym2R29+7dT7hHSdIDFuTuo6q6G/g88DLgwCTL2qqVwM423gmsAmjrnw3cMc++NlXV2qpaOzMzM3jvkrSUDHn30UySA9v4acCvAzcwCoeT27T1wKVtvKUt09ZfXlU1VH+SpIdb9thTfmqHAZuT7MsofC6pqs8muR74SJK/Ar4BnNvmnwtclGQ7cCfw2gF7kyTNY6JQSLK1qo57rNq4qtoGvHSe+k2Mri88tH4vcMok/UiShvGooZBkf+DpwPIkBwFzt4gewAN3DUmS9hKPdaTwu8DbgOcAV/FAKHwf+NCAfUmSpuBRQ6GqzgLOSvKWqvrgAvUkSZqSia4pVNUHk/wysHp8m6q6cKC+JElTMOmF5ouAnweuBu5v5QIMBUnai0x6S+pa4Ag/NyBJe7dJP7x2LfCzQzYiSZq+SY8UlgPXJ/kqo0diA1BVrxqkK0nSVEwaCn8xZBOSHu6773rRtFvQInT4n18z6P4nvfvoi4N2IUlaFCa9++gHjO42AtiP0Rfm/HdVHTBUY5KkhTfpkcKz5sbt29DWAccM1ZQkaToe96Oz29dsfhr4jQH6kSRN0aSnj149trgPo88t3DtIR5KkqZn07qPfHhvfB3yH0SkkSdJeZNJrCqcN3YgkafomuqaQZGWSTyXZ1V6fSLJy6OYkSQtr0gvN5zP6DuXntNdnWk2StBeZNBRmqur8qrqvvS4AZgbsS5I0BZOGwh1J3pBk3/Z6A3DHkI1JkhbepKHwZuA1wG3ArcDJwJsG6kmSNCWT3pL6LmB9Vd0FkORg4H2MwkKStJeY9EjhxXOBAFBVdwIvHaYlSdK0TBoK+yQ5aG6hHSlMepQhSXqSmPQ/9vcDVyT5WFs+BXj3MC1JkqZl0k80X5hkFji2lV5dVdcP15YkaRomPgXUQsAgkKS92ON+dLYkae9lKEiSOkNBktQZCpKkzlCQJHWGgiSpGywUkqxK8vkk1ye5LslbW/3gJJclubG9H9TqSXJ2ku1JtiU5aqjeJEnzG/JI4T7gD6vqCOAY4PQkRwBnAFurag2wtS0DnACsaa+NwDkD9iZJmsdgoVBVt1bV19v4B8ANwApgHbC5TdsMnNTG64ALa+RK4MAkhw3VnyTp4RbkmkKS1YyeqvoV4NCqurWtug04tI1XALeMbbaj1R66r41JZpPM7t69e7CeJWkpGjwUkjwT+ATwtqr6/vi6qiqgHs/+qmpTVa2tqrUzM34jqCTtSYOGQpKnMAqEi6vqk618+9xpofa+q9V3AqvGNl/ZapKkBTLk3UcBzgVuqKoPjK3aAqxv4/XApWP1U9tdSMcA94ydZpIkLYAhvyjn5cAbgWuSXN1q7wDeA1ySZANwM6Pvfgb4HHAisB34EXDagL1JkuYxWChU1b8BeYTVx80zv4DTh+pHkvTY/ESzJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1g4VCkvOS7Epy7Vjt4CSXJbmxvR/U6klydpLtSbYlOWqoviRJj2zII4ULgOMfUjsD2FpVa4CtbRngBGBNe20EzhmwL0nSIxgsFKrqS8CdDymvAza38WbgpLH6hTVyJXBgksOG6k2SNL+FvqZwaFXd2sa3AYe28QrglrF5O1rtYZJsTDKbZHb37t3DdSpJS9DULjRXVQH1U2y3qarWVtXamZmZATqTpKVroUPh9rnTQu19V6vvBFaNzVvZapKkBbTQobAFWN/G64FLx+qntruQjgHuGTvNJElaIMuG2nGSDwOvAJYn2QG8E3gPcEmSDcDNwGva9M8BJwLbgR8Bpw3VlyTpkQ0WClX1ukdYddw8cws4faheJEmT8RPNkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpG5RhUKS45N8K8n2JGdMux9JWmoWTSgk2Rf4O+AE4AjgdUmOmG5XkrS0LJpQAI4GtlfVTVX1v8BHgHVT7kmSlpRl025gzArglrHlHcAvPXRSko3Axrb4wyTfWoDelorlwPem3cRikPetn3YLejD/Nue8M3tiLz/3SCsWUyhMpKo2AZum3cfeKMlsVa2ddh/SQ/m3uXAW0+mjncCqseWVrSZJWiCLKRS+BqxJ8twk+wGvBbZMuSdJWlIWzemjqrovye8D/wzsC5xXVddNua2lxtNyWqz821wgqapp9yBJWiQW0+kjSdKUGQqSpM5QkI8X0aKV5Lwku5JcO+1elgpDYYnz8SJa5C4Ajp92E0uJoSAfL6JFq6q+BNw57T6WEkNB8z1eZMWUepE0ZYaCJKkzFOTjRSR1hoJ8vIikzlBY4qrqPmDu8SI3AJf4eBEtFkk+DFwB/EKSHUk2TLunvZ2PuZAkdR4pSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFLTkJVmZ5NIkNyb5dpKz2mc2Hm2bdyxUf9JCMhS0pCUJ8Eng01W1Bng+8Ezg3Y+xqaGgvZKhoKXuWODeqjofoKruB/4AeHOS30vyobmJST6b5BVJ3gM8LcnVSS5u605Nsi3JN5Nc1Gqrk1ze6luTHN7qFyQ5J8mVSW5q+zwvyQ1JLhj7ea9MckWSryf5WJJnLti/ipYsQ0FL3QuBq8YLVfV94LvAsvk2qKozgP+pqiOr6vVJXgj8GXBsVb0EeGub+kFgc1W9GLgYOHtsNwcBL2MUQFuAM1svL0pyZJLlbZ+/VlVHAbPA2/fELyw9mnn/6CU9LscCH6uq7wFU1dzz/18GvLqNLwL+emybz1RVJbkGuL2qrgFIch2wmtGDCY8Avjw6w8V+jB73IA3KUNBSdz1w8nghyQHA4cDdPPhoev89+HN/3N5/MjaeW14G3A9cVlWv24M/U3pMnj7SUrcVeHqSU6F/Pen7GX0N5E3AkUn2SbKK0bfUzfm/JE9p48uBU5Ic0vZxcKv/O6OnzgK8HvjXx9HXlcDLkzyv7fMZSZ7/eH856fEyFLSk1eiJkL/D6D/1G4H/BO5ldHfRl4H/YnQ0cTbw9bFNNwHbklzcnir7buCLSb4JfKDNeQtwWpJtwBt54FrDJH3tBt4EfLhtfwXwgp/295Qm5VNSJUmdRwqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSuv8HHGGod29RL/oAAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. In these 9 columns, there is 1 dependent to show the predictive result of diabetic and 8 columns of independent variables to cause diabetic happens\n",
        "2. The predictive 'Outcome' of diabetes is discrete number\n",
        "3. This dataset is unbalanced\n",
        "4. There are a few things we can can explore by age, bmi, blood pressure, Skinthickness"
      ],
      "metadata": {
        "id": "8U2Xb1X_mWvC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Correlation between different columns"
      ],
      "metadata": {
        "id": "S9YXg1ur17BX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "corr = df.corr()\n",
        "print(corr)\n",
        "sns.heatmap(corr, \n",
        "         xticklabels=corr.columns, cmap='Blues',annot=False,\n",
        "         yticklabels=corr.columns)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 979
        },
        "id": "3gY8xmSS18Md",
        "outputId": "ee4e3f7c-0e52-42ab-e360-2208c3a7491b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                          Pregnancies   Glucose  BloodPressure  SkinThickness  \\\n",
            "Pregnancies                  1.000000  0.128135       0.214178       0.100239   \n",
            "Glucose                      0.128135  1.000000       0.223192       0.228043   \n",
            "BloodPressure                0.214178  0.223192       1.000000       0.226839   \n",
            "SkinThickness                0.100239  0.228043       0.226839       1.000000   \n",
            "Insulin                      0.082171  0.581186       0.098272       0.184888   \n",
            "BMI                          0.021719  0.232771       0.289230       0.648214   \n",
            "DiabetesPedigreeFunction    -0.033523  0.137246      -0.002805       0.115016   \n",
            "Age                          0.544341  0.267136       0.330107       0.166816   \n",
            "Outcome                      0.221898  0.494650       0.170589       0.259491   \n",
            "\n",
            "                           Insulin       BMI  DiabetesPedigreeFunction  \\\n",
            "Pregnancies               0.082171  0.021719                 -0.033523   \n",
            "Glucose                   0.581186  0.232771                  0.137246   \n",
            "BloodPressure             0.098272  0.289230                 -0.002805   \n",
            "SkinThickness             0.184888  0.648214                  0.115016   \n",
            "Insulin                   1.000000  0.228050                  0.130395   \n",
            "BMI                       0.228050  1.000000                  0.155382   \n",
            "DiabetesPedigreeFunction  0.130395  0.155382                  1.000000   \n",
            "Age                       0.220261  0.025841                  0.033561   \n",
            "Outcome                   0.303454  0.313680                  0.173844   \n",
            "\n",
            "                               Age   Outcome  \n",
            "Pregnancies               0.544341  0.221898  \n",
            "Glucose                   0.267136  0.494650  \n",
            "BloodPressure             0.330107  0.170589  \n",
            "SkinThickness             0.166816  0.259491  \n",
            "Insulin                   0.220261  0.303454  \n",
            "BMI                       0.025841  0.313680  \n",
            "DiabetesPedigreeFunction  0.033561  0.173844  \n",
            "Age                       1.000000  0.238356  \n",
            "Outcome                   0.238356  1.000000  \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f1b2d803150>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAdYAAAF1CAYAAABVkssaAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3dd7xcVbn/8c/3hBYIHUSkGIRAiAiREkAsgIKgXJB2AQtG0NhAlKuXIj/kCgKClSISFQgIghQxAlIuXaSlEhLqBZQiXYN0kjy/P/YasnNyypyT2XvPPuf75jWvM7Nmz37WnBzmmVX2WooIzMzMrDU6qq6AmZnZQOLEamZm1kJOrGZmZi3kxGpmZtZCTqxmZmYt5MRqZmbWQk6sZmY2KEk6S9Kzku7t5nlJOkXSw5LukbRpM+d1YjUzs8HqHGCnHp7fGRiRbuOAM5o5qROrmZkNShFxC/BiD4fsBpwbmTuAFSSt3tt5nVjNzMy6tgbweO7xE6msR4sVVh0bNIa+/6DS18Wc9ueTyg4JwL9eeav0mKsut2TpMQEWG6JK4g5bspqPpaWXHFJJ3LHnTy095je3Waf0mA1brbfCIv1h9eXz5vVpp3+ZrAu3YXxEjF+U+M1wYjUzs/pQ8x2tKYkuSiJ9Elgr93jNVNYjdwWbmVl9SM3fFt1EYP80O3grYHZE/KO3F7nFamZm9dGHFmuvp5J+B2wLrCLpCeB7wOIAEfFL4CrgE8DDwKvAF5o5rxOrmZnVR2taogBExH69PB/A1/t6XidWMzOrj45qJpn1hROrmZnVRwu7govS/jVsU5LmSpom6V5JF0tauuo6NUPSrpIOr7oeZmb9Uu7kpX5xYu2/1yJidERsBLwJfCX/pKS27A2IiIkRcWLV9TAz6xd1NH+riBNra9wKrCdpW0m3SpoIzJI0RNLJku5OCzh/GUBSh6RfSLpf0nWSrpK0V3ruMUn/I2mKpBmSRqbyMZJulzRV0l8lbZDKx0q6TNLVkh6S9PbKCZJ2SueZLun63PGnpfurSro01e9uSduk8o+k1vi0FG/ZMn+ZZmbdqkGLtS1bVXWSWqY7A1enok2BjSLiUUnjyK572kLSksBtkq4FNgOGA6OAdwD3AWflTvt8RGwq6WvAt4EvAvcDH4qIOZI+BhwP7JmOHw28H3gDeEDSqcDrwK+AD6e6rNRF9X8O/DQi/iJpbeAaYMMU8+sRcZukYelcZmbVq8EYqxNr/w2VNC3dvxX4DfAB4K6IeDSV7whs3GiNAsuT7ZLwQeDiiJgHPC3pxk7nviz9nAzskXvtBEkjgCBda5VcHxGzASTNAt4NrAjc0qhLRHS10PTHgFGa/81uuZRIbwN+Iul84LKIeKKp34iZWdE8K3hAey0iRucLUoJ6JV8EHBwR13Q67hO9nPuN9HMu8/+NjgVujIjdJQ0Hburi+M6v6U0HsFVEdG6RnijpSrILo2+T9PGIuL/TexhHWoNzsTW3ZbFV3ttkSDOzRVCDFmv717DergG+KmlxAEnrS1qGrEW4ZxprXY1s5Y/eLM/8NSrHNnH8HcCHJa2TYnfVFXwtcHDjgaTR6ee6ETEjIn4I3A2M7PzCiBgfEZtHxOZOqmZWmg41f6uqipVFHhx+DcwCpqQd6s8ka01eSrb90Czgt8AUYHYv5zoJOEHSVJpokUbEc2QtysskTQcu6uKwbwCbp4lVs5g/s/mb6TKie4C3gD/3Fs/MrBQ1mBWsbMUmK5ukYRHxsqSVgbuAbSLi6arr1R/eNq5Y3jauHN42rhyLvG3cR49v+vPmteuPrOSP2GOs1blC0grAEsCxdU2qZmal8uQl605EbFt1HczMaqcGk5ecWM3MrD4qXPihWU6sZmZWH26xmpmZtZBbrGZmZi3kFquZmVkLeVawmZlZC7nFaoNBFYs1jN75v0uPCXDjxceVHvOZ2dVsLvSD6x+qJO4R269XSdyVhi1RSdwDxqxZeswJ058qPWbDVuutsGgn8BirmZlZC7nFamZm1kJusZqZmbWQW6xmZmatow4nVjMzs5aRu4LNzMxaqP3zqjc6byeSVpN0gaRHJE2WdLuk3SVtK+mKqutnZlY1SU3fquLE2iaU/RVcDtwSEe+JiM2AfYHyL3IzM2tTTqzWF9sDb0bELxsFEfG3iDg1f5CkYyR9O/f4XknD0/39Jd0jabqk81LZcEk3pPLrJa2dyvdOr50u6ZZUNkTSyZLuTsd/ufB3bWbWBx0dHU3fquIx1vbxXmBKf18s6b3AUcAHIuJ5SSulp04FJkTEBEkHAKcAnwKOBj4eEU9KaiyFciAwOyK2kLQkcJukayPi0f7Wy8yspTzGav0l6fTUmry7yZdsD1wcEc8DRMSLqXxr4IJ0/zzgg+n+bcA5kr4ENFa13hHYX9I04E5gZWDEor0TM7PWcVew9cVMYNPGg4j4OvBRYNVOx81hwX+3pfoTLCK+QtbCXQuYLGllsu+CB0fE6HRbJyKu7er1ksZJmiRp0kXnndWfKpiZ9ZkTq/XFDcBSkr6aK1u6i+MeIyVgSZsC6+Rev3dKkOS6gv9KNgkK4DPAren5dSPizog4GniOLMFeA3xV0uLpmPUlLdNVZSNifERsHhGb7/O5A/rzfs3M+syJ1ZoWEUE29vkRSY9KuguYABzW6dBLgZUkzQQOAh5Mr58J/AC4WdJ04Cfp+IOBL0i6B/gccEgqP1nSDEn3kiXf6cCvgVnAlFR+Jh6HN7M20urEKmknSQ9IeljS4V08v7akGyVNTZM6P9HbOf2h2UYi4h/Mb112dlM65jWysdCuXj+BLBnny/5GNv7a+dg9ujoFcGS6mZm1HXW0riUqaQhwOrAD8ARwt6SJETErd9hRwO8j4gxJo4CrgOE9ndctVjMzq40Wt1jHAA9HxCMR8SZwIbBbp2MCWC7dXx7odTNbt1jNzKw2Wjx2ugbweO7xE8CWnY45BrhW0sHAMsDHejupW6xmZlYfav6Wv3oh3cb1I+J+wDkRsSbwCeA8qee969xiNTOz2uhLizUixgPjezjkSbIrIhrWTGV5BwI7pfPdLmkpYBXg2e5O6harmZnVRovHWO8GRkhaR9ISZJNHJ3Y65u9kawogaUOytQOe6+mkbrGamVlttHIN4IiYI+kgsmv4hwBnRcRMSd8HJkXEROC/gF9J+hbZRKax6fLIbjmxmplZfbR43YeIuIrsEpp82dG5+7OAbfpyTidWMzOrjSpXVGqWE6stsn+98lbpMW+8+LjSYwJst/dRpce8oaL3euqe76sk7synZ1cSd+O1lq8k7tR//LP0mF8Zs1bvB7UpJ1YzM7MWcmI1MzNroVYuaVgUJ1YzM6sNt1jNzMxayInVzMyshZxYzczMWqn986oTq5mZ1UcdWqxeK7gTSXMlTZM0XdIUSR9I5cMl3duiGDdJ2jzdf0zSjLQz/bWS3tmKGGZmA1FHh5q+VVbHyiK3r9ciYnREbAIcAZxQQsztImJjYBJwZP4JZUr5d5LkHgwza2stXoS/EE6sPVsOWGhZFElLSTo7tTSnStqul/Khki6UdJ+kPwBDu4l3C7Beah0/IOlc4F5gLUnfkXR3atn+TzrvMpKuTK3reyXtk8pPlDQrHfujVHaOpL1y7+Hl9HNbSbdKmgjMkjRE0sm5WF9u0e/SzGyRSc3fquIWysKGSppGtjXQ6sD2XRzzdSAi4n2SRpLtLr9+D+VfBV6NiA0lbQxM6Sb2LsCMdH8E8PmIuEPSjunxGLKh+4mSPgysCjwVEZ8EkLS8pJWB3YGRERGSVmjiPW8KbBQRj6aNgGdHxBaSlgRuk3RtRDzaxHnMzArlMdZ6anQFjyTb3PZcLfwv+UHgtwARcT/wN2D9Hso/nCu/B7in0/luTMl8OeZ3Pf8tIu5I93dMt6lkSXkkWaKdAewg6YeSPhQRs4HZwOvAbyTtAbzaxHu+K5c4dwT2T/W5E1g5xVqApHGSJkmadPmF5zQRwsxs0bnFWnNpt/hVyFqGRdouIp5vPEitzFdyzws4ISLO7PxCSZsCnwCOk3R9RHxf0hiyjXn3Ag4ia3XPIX2RSmO2S+RO0znWwRFxTU8VjojxwHiAO/9vdo97E5qZtUqVk5Ka5RZrD1J37hDghU5P3Qp8Jh2zPrA28EAP5bcAn07lGwEb97Eq1wAHSBqWzrGGpHdIehdZF/NvgZOBTdMxy6c9Br8FbJLO8RiwWbq/K7B4D7G+KmnxxvuQtEwf62tmVog6zAp2i3VhjTFWyFpvn4+IuZ16g38BnCFpBllLcGxEvCGpu/IzgLMl3QfcB0zuS4Ui4lpJGwK3p3q8DHwWWA84WdI84C2ysdxlgT9KWirV/9B0ml+l8unA1SzYSs37NTAcmJK6wJ8DPtWX+pqZFaUGQ6xOrJ1FxJBuyh8DNkr3Xwe+0MUx3ZW/BuzbzXmH9xQrV/Zz4OedDv0/shZmZ2O6OOczwFa5osNS+U3ATbnj5pFd8rPAZT9mZu2gDpOXnFjNzKw2nFjNzMxaqAZ51YnVzMzqow6zgp1YzcysNtwVbGZm1kI1yKtOrGZmVh9usZqZmbVQDfKqE6stulWXW7L0mM/Mfr30mAA3XHxc6TG33/uo0mMC3Hb58ZXEPf6qByqJO3LscpXE3WjVZvbJaK3nXqnm/5/Msov0ardYzczMWsizgs3MzFqoBg1WJ1YzM6sPdwWbmZm1UA3yqhOrmZnVh1usZmZmLeTEamZm1kJ1mBXcUXUF2pGk70qaKekeSdMkbSnpMUmrdHHsX3s51x/SOR6WNDvdnybpAz2cc1dJh/dwzuGS7u3fuzMzqy+p+Vtz59NOkh5In9Fdfu5K+k9Js1JeuKC3c7rF2omkrYFdgE0j4o2U+Jbo7viI+EBP54uI3dN5twW+HRG75GJ195qJwMQ+V97MbIBrZVewpCHA6cAOwBPA3ZImRsSs3DEjgCOAbSLin5Le0dt53WJd2OrA8xHxBkBEPB8RTzWelDRU0p8lfSk9fjn93FbSTZIukXS/pPPV3F/AwZKmSJohaWQ611hJp6X7q6VW7/R0WyCRS3qPpKmStkivu0zS1ZIeknRS7rgdJd2eYl0saVgqPzF9E7tH0o9S2d6S7k3xblmUX6aZWSu1uMU6Bng4Ih6JiDeBC4HdOh3zJeD0iPgnQEQ829tJnVgXdi2wlqQHJf1C0kdyzw0D/gT8LiJ+1cVr3w98ExgFvAfYpol4z0fEpsAZwLe7eP4U4OaI2ATYFJjZeELSBsClwNiIuDsVjwb2Ad4H7CNprdTqPgr4WIo1CThU0srA7sB7I2JjoLFe39HAx1PMXZt4D2ZmpeiQmr41YQ3g8dzjJ1JZ3vrA+pJuk3SHpJ16rWPT72aQiIiXgc2AccBzwEWSxqan/wicHRHndvPyuyLiiYiYB0wDhjcR8rL0c3I3x29PlnSJiLkRMTuVr5rq85mImJ47/vqImB0RrwOzgHcDW5El+9skTQM+n8pnA68Dv5G0B/BqOsdtwDmpVT6kq0pLGidpkqRJvzv3N028TTOzRdfRoaZv+c+pdBvXj5CLASOAbYH9gF9J6nGBZ4+xdiEi5gI3ATdJmkGWiCBLODtJuiAioouXvpG7P5fmfr+N1zR7fMNs4O/AB8kSaE91EHBdROzX+SSSxgAfBfYCDgK2j4ivSNoS+CQwWdJmEfFC/nURMR4YD/DIc6939bswM2u5vkwKzn9OdeNJYK3c4zVTWd4TwJ0R8RbwqKQHyRLt3XTDLdZOJG2QBqsbRgN/S/ePBv5JNthdluuBr6a6DZG0fCp/k6wbd39Jn+7lHHcA20haL51nGUnrp3HW5SPiKuBbwCbp+XUj4s6IOJqs1b5Wdyc2MyuTpKZvTbgbGCFpHUlLAPuy8MTRy8laq6RhtfWBR3o6qRPrwoYBExoTesi6UI/JPX8IMDQ/MahghwDbpZbz5FQfACLiFbIZzN+S1O1YaEQ8B4wFfpfe0+3ASLL9m65IZX8BDk0vOTlNproX+CswfeGzmpmVr5WTlyJiDllP3TXAfcDvI2KmpO/nPlOvAV6QNAu4EfhO5x68herYdY+mWfOq6Aquaj/WKgy2/VgPumhaJXHPHbtFJXFffWNu6TGr3I/1oyNXWaTrZXY58+6mP2+u+PIWlawm4TFWMzOrjRosvOTEamZm9VGHJQ2dWM3MrDaavD61Uk6sZmZWGzXIq06sZmZWH61cK7goTqxmZlYbNcirTqxmZlYfQ2qQWZ1YbZEtNqT8P/QfXP9Q6TEBTt3zfaXHrOp60m0+dWQlcW+4+LjeDyrA3HnVXNP/6ptzSo/5UgUxW8VdwWZmZi1Ug6ttnFjNzKw+3GI1MzNroRrkVSdWMzOrD7dYzczMWmhIDQZZnVjNzKw22j+tOrGamVmN1GGtYG90XhOSXm7x+YanjcyRtLmkU1p5fjOzIrRyo/OiuMVqRMQkYFLV9TAz600dJi+5xVozkraVdJOkSyTdL+l8pb80SSdKmiXpHkk/SmXnSNor9/qFWr7pnFek+8dIOivFeETSN8p6b2ZmvXGL1YryfuC9wFPAbcA2ku4DdgdGRkRIWmERzj8S2A5YFnhA0hkR8daiVtrMbFHVYVawW6z1dFdEPBER84BpwHBgNvA68BtJewCvLsL5r4yINyLieeBZYLVFrbCZWStIavpWFSfWenojd38usFhEzAHGAJcAuwBXp+fnkP6dJXUAS/Tn/J0PkDRO0iRJky6Y8Ou+vwMzs37o6MOtKu4KHiAkDQOWjoirJN0GPJKeegzYDPg9sCuweCviRcR4YDzA3198o5ptQcxs0KnD5CUn1oFjWeCPkpYiu4b60FT+q1Q+nawV+0pF9TMzW2Q1GGJ1Yq2LiBiWft4E3JQrPyh32JguXvcMsFWu6LBU/hiwUedzRsQxnV6/0aLW3cysVeowecmJ1czMaqMGedWJ1czM6qMGQ6xOrGZmVh91WCvYidXMzGqjDteIOrGamVlt1KDB6sRqZmb14VnBZmZmLVSDvOrEaotu2JLl/xkdsf16pccEmPn07NJjHn/VA6XHBLjh4uMqibv93kdVEvfuK06sJO6Idw4rPebjDy3KUuLV8uQlMzOzFqpBXq3FBCszMzMg6wpu9tYMSTtJekDSw5IO7+G4PSWFpM17rWPzb8fMzKxa6sN/vZ5LGgKcDuwMjAL2kzSqi+OWBQ4B7mymjk6sZmZWG4t1NH9rwhjg4Yh4JCLeBC4EduviuGOBH5Lted0rJ1YzM6uNFm90vgbweO7xE6ksH29TYK2IuLLZOnrykpmZ1UZfLreRNA4Ylysan/aSbvb1HcBPgLHNR3ViNTOzGunLrOCURHtKpE8Ca+Uer5nKGpYl217zptQCficwUdKuETGpu5O6K3iAkzRX0jRJ0yVNkfSBVD48zXA7LnfsKpLeknRaenyMpG9XVXczs846pKZvTbgbGCFpHUlLAPsCExtPRsTsiFglIoZHxHDgDqDHpApOrIPBaxExOiI2AY4ATsg99yjwydzjvYGZZVbOzKwvhnQ0f+tNRMwBDgKuAe4Dfh8RMyV9X9Ku/a2ju4IHl+WAf+YevwrcJ2nz9A1sH+D3wLuqqJyZWW86mriMpi8i4irgqk5lR3dz7LbNnNOJdeAbKmkasBSwOrB9p+cvBPaV9AwwF3gKJ1Yza1N1WHnJiXXgey0iRgNI2ho4V9JGueevJrtG6xngogrqZ2bWtDoswu8x1kEkIm4HVgFWzZW9CUwG/gu4pNlzSRonaZKkSRPO+lXL62pm1pUWT14qhFusg4ikkcAQ4AVg6dxTPwZujogXm7yoeoFp7C++MjdaXFUzsy65K9jaQWOMFUDA5yNibj6BRsRMPBvYzGrAG51b5SJiSDflj5Fd+Ny5/BzgnHT/mOJqZmbWd3UYv3RiNTOz2mh2uKpKTqxmZlYb7Z9WnVjNzKxGqpzt2ywnVjMzq432T6tOrGZmViMdnhVsZmbWOp4VbGZm1kJ1mBWsCC+aY4vm9TmU/kf06HOvlB0SgDVXHFpJ3GdeeqP0mHPnVfPZ8NbceZXE3WKXwyuJ+/dbf1Z6zKdefK30mA2brL3sImXGi6c91fQf5t6j31VJFnaL1azNVZFUzdpVHVqsTqxmZlYbQ5xYzczMWqf906oTq5mZ1UgNGqxOrGZmVh8dNWizOrGamVltuMVqZmbWQqpBi7XXRSwkzZU0TdJMSdMl/ZekjvTc5pJO6eX1YyWd1pdKSTqyL8d3eu05kh5NdZ4iaes+vPbtukr6iqT9+1uPJuMNl/RaqmvjtkQLzz9W0rtyj38taVSrzm9mVrYhUtO3qjTTYn0tIkYDSHoHcAGwHPC9iJgETCqgXkcCxy/C678TEZdI2hE4E9i4ryeIiF/25XhJi0XEnL7GAf6v8fstwFjgXuApgIj4YkFxzMxKUYeu4D4tuxgRzwLjgIOU2VbSFQCSxki6XdJUSX+VtEHupWtJuknSQ5K+1yiU9FlJd6WW2pmShkg6ERiays7v4bghqXV6r6QZkr7VRZVvAdbr7hyp/AuSHpR0F7BNrm7HSPp2ur+FpHvSa0+WdG8qHytpoqQbgOslLSPprBRnqqTd0nFD0uvuTuf5ck+/Z0kv5+7vJemcdP8cSaek3+8jkvbKHXdY+j1Ml3Riem5z4PxU76Hp32DzdPx+6fh7Jf0wH1vSD9J57pC0Wk91NTMrk9T8rSp9Xs84Ih4BhgDv6PTU/cCHIuL9wNEs2OIcA+xJ1nLcO3UhbwjsA2yTWmxzgc9ExOGkVnJEfKa744DRwBoRsVFEvA84u4vq/gcwo7tzSFod+B+yhPpBoLtu0rOBL+dem7cpsFdEfAT4LnBDRIwBtgNOlrQMcCAwOyK2ALYAviRpnfT6dXPdwKd3Ez9v9VTXXYATASTtDOwGbBkRmwAnRcQlZL0Jn0m/y7fXMEvdwz8Etif7PW4h6VPp6WWAO9J5bgG+1ESdzMxKoT78V5VWTl5aHpggaQQQwOK5566LiBcAJF1GlhjmAJsBdyv7ajEUeLaL8360m+P+BLxH0qnAlcC1udecLOko4DmypNbdObYEboqI51LdLgLWzweXtAKwbETcnoouIEtq+ff2Yrq/I7Bro6ULLAWsnco3zrUwlwdGAA/S967gyyNiHjAr15r8GHB2RLwKkKtPd7Zgwfd9PvBh4HLgTeCKdNxkYIc+1M3MrFA12DWu74lV0nvIWm3PAhvmnjoWuDEidpc0HLgp91znRZODbAGNCRFxRG8huztO0ibAx4GvAP8JHJCe+k5qsTWO266rc+RaaYsivxq8gD0j4oFOcQQcHBHXdCof3s0587+vpTo9l184tog/sbdi/s4Mc+nmb0TSOLJhAU77xZkc+KVxBVTFzGxBHTUYZO1TV7CkVYFfAqflPnwblgeeTPfHdnpuB0krSRoKfAq4Dbge2EvZhCjS8+9Ox78lqdHi7fI4SasAHRFxKXAUWZdsd7qLdSfwEUkrp3h7d35hRPwL+LekLVPRvj3EuQY4OCVSJL0/V/7VxnuStH7qIu7OM5I2VDb7evcejmu4DviCpKUb7y+V/xtYtovj7yJ736ukseb9gJubiPO2iBgfEZtHxOZOqmZWloHSFTxU0jSyrt05wHnAT7o47iSyruCjyLpm8+4CLgXWBH6bZhOTjr02JZC3gK8DfwPGA/dImpLGWbs67jXg7FQG0G3LNyJmdXWOiLhD0jHA7cC/gGndnOJA4FeS5pEloNndHHcs8LNU9w7gUbJu418Dw4EpKek+R/YFozuHk3XHPkc2Tjqsh2OJiKsljQYmSXoTuIpsZvU5wC8lvQZsnTv+H5IOB24ka/VeGRF/7CmGmVk7qENXsPdjbYKkYRHxcrp/OLB6RBxScbXahvdjLVZV28Z5P9ZyeD/Wvrn1wX82/Yf5ofVX9H6sbeyTko4g+339jYW7us3MrAQ1GGJ1Ym1GRFwEXFR1PczMBrsa5FUnVjMzqw9vdG5mZtZK7Z9X+77ykpmZWVVafbmNpJ0kPSDp4TQ5tfPzh0qalZajvT53WWi3nFjNzKw2WrlWcLqO/3RgZ7IlbffTwjuATQU2j4iNgUvILi3tkROrmZnVhvpwa8IY4OGIeCQi3gQuJFt3/W0RcWNjuVjgDrL1GHrkMVZbZGPPn1p6zAPG9Pq3XYip//hnJXE3WnWF0mO++mZ/dkFcdCPe2eN6KIWp4npSgLU/9M3SY1570bGlx2yZPoyx5pdeTcZHxPjc4zWAx3OPnyBbQ747BwJ/7i2uE6tZm6siqZq1q76sFZyS6PheD2yCpM+SbcX5kd6OdWI1M7PaaPGk4CeBtXKP12T+mvfzY0ofI9sW9CMR0etSaB5jNTOz+mjtIOvdwAhJ60hagmyTlYkLhMs2UzkT2DUiutradCFusZqZWW20cteaiJgj6SCyHciGAGdFxExJ3wcmRcRE4GSyjVAuThuX/T0idu3pvE6sZmZWG61eeCkiriLbESxfdnTu/sf6ek4nVjMzq40arGjoxGpmZvVR5QbmzfLkpQFO0qckhaSRVdfFzGxRtXLlpaI4sQ58+wF/ST/NzGqtxSsvFcKJdQCTNAz4INlqIfumsg5Jv5B0v6TrJF0laa/03GaSbpY0WdI1klavsPpmZgurQWZ1Yh3YdgOujogHgRckbQbsAQwnW3D6c8DWAJIWB04F9oqIzYCzgB9UUWkzs+60enebInjy0sC2H/DzdP/C9Hgx4OKImAc8LenG9PwGwEbAdelarSHAP8qtrplZzzraf+6SE+tAJWklYHvgfZKCLFEG8IfuXgLMjIitmzz/24tbbz72u6y77Z6LXmkzs97UILG6K3jg2gs4LyLeHRHDI2It4FHgRWDPNNa6GrBtOv4BYFVJb3cNS3pvdyePiPERsXlEbO6kamZlcVewVWk/4Iedyi4FNiTbGmkW2XZJU4DZEfFmmsR0iqTlyf42fgbMLK/KZmY98wIRVpmI2K6LslMgmy0cES9LWhm4C5iRnp8GfLjUipqZ9UEN8qoT6yB1haQVgCWAYyPi6aorZGbWlBpkVifWQSgitq26DmZm/dGXjc6r4sRqZma10f5p1YnVzMzqpAaZ1YnVzMxqow672zixmplZbdRgiNWJ1T6HbpsAAB2/SURBVMzM6sOJ1czMrIXq0BWsiKi6DlZzdzz8r9L/iCZMf6rskAB8Zcxapcd8/pU3So8J8NKbcyqJO2fevErirr/SspXEfen18n/PO+7z/0qP2fDa1NMWKTP+/cU3mv68WXulJSvJwm6xmplZbbR/e9WJ1czMasRjrGZmZi3V/pnVidXMzGrDG52bmZm1kLuCzczMWqgOl9s4sZqZWX20f16lo+oKDFaS1pT0R0kPSfo/ST+XtEQvrzmyrPqZmbUj9eFWFSfWCkgScBlweUSMANYHhgE/6OWlTqxmNqhJzd+q4sRaje2B1yPibICImAt8CzhA0tckndY4UNIVkraVdCIwVNI0Seen5/aXdI+k6ZLOS2XDJd2Qyq+XtHYqP0fSGZLukPRIOudZku6TdE4u3o6Sbpc0RdLFkoaV9lsxM+uFpKZvVXFircZ7gcn5goh4Cfg73Yx7R8ThwGsRMToiPiPpvcBRwPYRsQlwSDr0VGBCRGwMnA+ckjvNisDWZEl8IvDTVJf3SRotaZV0zo9FxKbAJODQVrxhM7NWcFewFWl74OKIeB4gIl5M5VsDF6T75wEfzL3mT5EtDj0DeCYiZkTEPGAmMBzYChgF3CZpGvB54N1dBZc0TtIkSZMuv/Cclr4xM7Pu1KEr2LOCqzEL2CtfIGk5YG3gXyz4hWepFsZtrOY+L3e/8XgxYC5wXUTs19uJImI8MB6qWYTfzAanOlxu4xZrNa4Hlpa0P4CkIcCPgXOAR4DRkjokrQWMyb3uLUmLp/s3AHtLWjmdY6VU/ldg33T/M8CtfajXHcA2ktZL51xG0vp9fXNmZkVpdYtV0k6SHpD0sKTDu3h+SUkXpefvlDS8t3M6sVYgdcfuTpYYHwIeBF4nm/V7G/AoWav2FGBK7qXjgXsknR8RM8lmEd8saTrwk3TMwcAXJN0DfI75Y6/N1Os5YCzwu/T624GR/X2fZmat1srEmho1pwM7kw2D7SdpVKfDDgT+GRHrkc1L+WFv53VXcEUi4nHgP7p5+jPdvOYw4LDc4wnAhE7H/I1s/LXza8fm7j8GbNTNczcAW/T+DszMytfiruAxwMMR8QiApAuB3cgaNg27Acek+5cAp0lS9LCZuVusZmZWG31pseYnWabbuE6nWwN4PPf4iVTW5TERMQeYDazcUx3dYjUzs9roS3s1P8myTG6xmplZfbT2QtYngbVyj9dMZV0eI2kxYHnghZ5O6sRqZma1oT7814S7gRGS1klrte9LtnhO3kSya/ohu0zyhp7GV8FdwWZmViOt3Og8IuZIOgi4BhgCnBURMyV9H5gUEROB3wDnSXoYeJH5lzN2y4nVzMzqo8XrQ0TEVcBVncqOzt1/Hdi7L+d0YjUzs9qow8pL6qWr2KxQksalmXsDOqbjDtyYjmudefKSVa3zdWUDNabjDtyYjmsLcGI1MzNrISdWMzOzFnJitapVMU5T1diQ4w7MmI5rC/DkJTMzsxZyi9XMzKyFnFjNzMxayInVzMyshZxYzQYwSStK2rjqepgNJp68ZKWTtAzwWkTMk7Q+MBL4c0S8VXDcdwMjIuJ/JQ0FFouIfxcZs4q4km4CdiVbsnQy8CxwW0QcWlTMTvGHAKuRWzI1Iv5eQJwe309E/KTVMTvFXxX4EjCcBd/rAQXGXA04HnhXROwsaRSwdUT8pqiYKe7SwH8Ba0fElySNADaIiCuKjFtXbrFaFW4BlpK0BnAt8DngnCIDSvoScAlwZipaE7i8yJgVxl0+Il4C9gDOjYgtgY8VHBMASQcDzwDXAVemW1Efvsv2civaH8n25vxf5r/XKwuOeQ7ZTizvSo8fBL5ZcEyAs4E3gK3T4yeB40qIW0tehN+qoIh4VdKBwC8i4iRJ0wqO+XVgDHAnQEQ8JOkdBcesKu5iklYH/hP4bsGxOjuErCXT40bQrRAR/1N0jF4sHRGHlRxzlYj4vaQj4O1tz+aWEHfdiNhH0n4p7quS2n81/Io4sVoVJGlr4DPAgalsSMEx34iINxufBZIWA8oYB6ki7vfJWjV/iYi7Jb0HeKjgmA2PA7PLCCTplJ6ej4hvFFyFKyR9Im07VpZXJK1M+huStBXl/L7fTMMYjbjrkrVgrQtOrFaFbwJHAH9Imwq/B7ix4Jg3SzoSGCppB+BrwJ8KjllJ3Ii4GLg49/gRYM8iY+Y8Atwk6UpyH7wFjXd+BbgX+D3wFC3fqbNXhwBHSnoTaMwPiIhYrsCYhwITgXUl3QasCuxVYLyG7wFXA2tJOh/YBhhbQtxa8uQlq4ykpSPi1ZJidZC1jnck+wC+Bvh1FPw/QOou+2KZcSWdRDb+9RrZh+HGwLci4rdFxczF/l5X5UV026aW297APsAc4CLgkoj4V6tjtZPU67EB2d/TA0VP+svFXRnYKsW9IyKeLyNuHTmxWulSN/BvgGERsbakTYAvR8TXSoq/ErBmRNxTcJwhwMyIGFlknC7iTouI0ZJ2B3Yha+XcEhGblFmPMklaE9iX7L0eFhHnlRR3V+DD6eFNRc+SlbRHF8WzgRkR8WzBsTdm4RnQlxUZs67cFWxV+BnwcbIuLSJiuqQP9/ySRdPVJSiS/hoR3yoqZkTMlfSApLWLuNykB43/rz8JXBwRs4ueZyLpZxHxTUl/oosx5IjYtcDYmwL7ATsAfyb79y2cpBOBLYDzU9EhkraJiCMKDHsg2czcxtDJtmTvdx1J3y/qC4Wks8h6PmYC81JxAE6sXXBitUpExOOdPuyLntm4fES8JOmLZJegfE9SoS3WZEVgpqS7gFcahUUmGrJJNfeTdQV/NV1v+XqB8QAaH+g/KjjO2yR9n+zLw33AhcARETGnrPjAJ4DRETEv1WcCMJVs/kBRFgM2jIhnUszVgHOBLckuYyuqpb5VRIwq6NwDjhOrVeFxSR8AQtLiZJNA7is4ZlWXoPy/EmMBEBGHp3HW2anV/CqwW8ExJ6efNxcZp5OjgEeBTdLt+PRlTVlVoowVp1YAXkz3ly8h3lqNpJo8m8pelFTkWOvtkkZFxKwCYwwYTqxWha8APwfWILvQ/Fqy6z2L1LgE5bYyL0EpOdEAb6+S8zVgbWAc2WICG1DcQg1ImkEPlxEVlOTWKeCcfXECMFXSjWTJ/MPA4QXHvEnSFcyf9b1nKlsGKHLS1rlkyfVpstneZX55qR1PXjIrkKR/Mz/hLAEsDrxS5CUZki4iG3fbPyI2Son2rxExusCY7+7p+Yj4W1GxO9VjFeCFomd75+KtTjbOCnBXRDxdcDyRraj1wVT0T2C1iCj0i6mkh8kmhs1g/hhraf+udeMWq5VG0n+nVZZOpesJLoVd0J9mjZ5Kdv0dwK3AIRHxRFExASLi7aX10ofibmSXLBSp9FVyqviATYsjnEjWFXss2fjiKkCHpP0j4uqC4o6MiPvTpCmAxt/QuyS9KyKmFBEXsiaipEfI/ob2JusKv7SoeDnPRcTEEuIMCE6sVqbGOOqkCmKfDVxA9mEE8NlUtkNZFUitqMvTtZ5FdhlWtkpOyS3004AjycY2bwB2jog7JI0Efkd2DW8RDiXrYv9xF88FsH2rAyrbrGK/dHue7JpdRcR2rY7VjamSLiBb3CS/8IdnBXfBXcE2KDSu7eytrIC4+esOO4DNgY9ExNbdvKQVMXcgm9gzimz8ehtgbETcVFTMburxdgs9Ilr+RSL/7yfpvojYMPfc1Ih4f6tjdoq/VES83ltZi2LNI+tlOTAiHk5lj0TEe1odq5v4Z3dRHEXu5FNnbrFa6SRdB+zdWCFH0orAhRHx8QLDviDps2QtGci++Re+UDzwH7n7c4DHKH6G7nWSpjB/lZxDqlglp4QW+rzc/dc6hy8gXmd/BTZtoqwV9iBbAONGSVeTXV5U2hKOEfGFsmINBE6sVoVV88vORcQ/VfyOLweQjbH+lOxD969A4R8WFX4gLUU2sWUxYJQkIuKWooN200Iv6hraTSS9RJZghqb7pMdLFRQTSe8km9E+VNL7mZ/glgOWLiJmRFxO9iVlGbIvZt8E3iHpDLI1t68tIm5DVXMU6sqJ1aowN78aUZpRWmgLI02uKXJRhi5VsW6vpB+SrZ/beZWcwhMrJbbQI6LoHZG683GyBejXJBtnbSTWl8jGfAsTEa+QzRW4IPX07A0cRtblX6TK5yjUicdYrXSSdgLGAzeTfSh9CBgXEdcUGHMC2TfsfPfzj4seI6pi3V5JDwAbR4S39SqQpD0joowZuZWrao5CXXVUXQEbfNJlEJuSzWy8ENisyKSabNy5+xkodHJLstC6vSXEfIRsNm7pJJ0kaTlJi0u6XtJzaWx7INpM0gqNB5JWlHRclRUq0AuSPitpSLp9lnLmKNSSE6tVZUmy6w9fIhsDLHQRfrJrG1dsPFC2w00ZQyGNdXs3A64vad3eV4Fpks6UdErjVnDMhh0j4iWy1vljwHrAd0qKXbadu/iy9okK61OkA8iWA30a+AfZHrCe0NQNj7Fa6SoaA/wx2ZJsF5N1P+8F/KDAeECX6/a+QsGzgsl2DarqYv7Sd9ap0BBJSza63NO1w0tWXKdCVDVHoa6cWK0KnwI2KHMMMCLOlTSJ+Rfv71HGguKS9gauTkn1KLIu8OPIvvkX5d7Govi5euxSYLy8KnbWqcr5ZL0QjWs8vwBMqLA+halqjkJdefKSlU7Sn8muY325xJhrd1Ve9D6pku6JiI0lfZAsoZ4MHB0RWxYYcwrZOsH3psf7Ad8sMman+Csxv4W+NLBc0WvoVkXSzsBH08PrSpgrUImuFtwoYxGOunKL1arQGAO8ngWXRytsrWDgSuZf0jOUbGeUB4D3FhgT5u8z+0lgfERcWcIEl72ASyR9mmzG9f7AjgXHzBsJDJeU/3w5t8T4pYmIP5Ntrj7QdUhaMY0jlzlHoZb8i7EqlD4GGBHvyz9OC6h/rYTQT0o6k+x6vx9KWpKCJw1GxCOS9gUuB/5ONqGo88pEhZB0HrAuMI35XyqCAZhY02IYPwTeQTZu39hKrbCdiyqUn6MA2fWsx1dYn7bmrmAbtCTN6JxwC4ixNLATMCMiHlK2zdj7ilgpRwvvifoOYDapV6CMvTMl3QeMKmvbtiop20rtPyLivl4PHgAkjWL+HIUbypijUFdusVrpJI0g2yR6FLml54pcUFzSobmHHWSTiJ4qKl5D2rLtWbL9Mx8iW42oqA3Wy5qg1JN7gXeSXZIx0D0ziJLqeRHxOWBWF2XWiROrVeFs4Htk6/ZuRzabsuhrqpfN3Z9DNuZa+Ko5aQH6zYENyN734sBvmb/mass09kRVtk/pzIj4d3q8HLAhUMaeqasAsyTdxYLj5wPxUo1JyjaVv5yBv5XaAnMRJA0huzbbuuCuYCudpMkRsVm+K7ZRVnXdWk3SNLIVnqY0ZlA2ZgoXGHMqsGmjO1ZSBzApIorYdaVz7I90VR4RNxcdu2yDYSs1SUeQrX88lGzSYeOi5DfJJuMdUVXd2plbrFaFN9KH/UOSDgKeBIYVEUjSn+hhgf8SWlJvRkRIaiS5ZQqOB9kX5rffc0TM6zRDtzADMYF2ZzBspRYRJwAnSDrBSbR5TqxWhUPIttf6BnAs2YSIzxcU60ddlDWSThlLAv0+zQpeQdKXyJaG+1XBMR+R9A3gjPT4a2TrBxdG0r/p+gvMgJ0pm1qsC73ngdRizflzV8uOlrEVYR25K9gGNEm7AWtGxOnp8V3AqmQfiIdFxMU9vX4RY4tsa7GRZNeRCrgmIq4rKmaK+w7gFLIvLAFcT7ZAxLNFxh1sJO2Ze7gUsDvwVMHXY1ci9fw0LAWMASZHxPbdvGRQc2K10klan2xh9neT6zUp4n9SSbcB+0bE4+nxNLKVcpYBzo6Ij/b0+hbEL/ySHmsPaXjjLxHxgarrUjRJawE/i4g9ez14EHJXsFXhYuCXZF2ic3s5dlEt0UiqyV8i4gWybbDKGO+cImmLiLi76ECS/jsiTpJ0Kl13UQ64llSbGUF27fBg8ATZTHPrghOrVWFORJzR+2EtsWL+QUQclHu4agnxtwQ+K+kx4BXmjzkWMSu4cU3lpALObZ10Ma78NHBYRdUpVKcvax2kme7V1ai9uSvYSifpGOBZ4A8seP3fiwXEOh+4KSJ+1an8y8C2EbFfq2N2ivPursob15xa/UhaLCLmVF2PMkn6KjAkPfwX8GhE3FZhldqaE6uVTtKjXRRHESsvpYk8jQv4G9+wNyPbN/NTEfFMq2Pm4h5JttH3DOCEtAF44dIY9reB4RQ8hj0YSZrSuCZY0qkRcXDVdSpKukzreLLZ7I2doNYGzgK+GxFvVVW3dubEaoOCpO2Zv3rMzIi4oeB4VwOTyTZv3wVYNiLGFhkzF3s62Rj2ZHJj2J33aLX+yW+Xlk+yA5Gkn5KtWvatTit5/Qh4LSIOqbJ+7cqJ1UqXdgXpbDbZQvUD4pIQSdMjYpPc49I+gAfqKlbtolOLdaAn1oeA9TtvqpCWNLw/IkZUU7P25slLVoUDga2BG9PjbclaV+tI+n5EnFdVxVpJ0orMX4RiSP5xQePJK6W7f5L0NUoYwx6kRkq6h+zfct10H4qdmFaV6GqnorSJvVtl3XBitSosBmzYGN+UtBrZfp1bknWdDoTEujzZl4X86k6NMd4AitjJZ3I6dyPmd3LPFRVzMBpMl5nMkrR/RCywn66kzwL3V1SntueuYCudpFkRMSr3WGTjnqPy41fWN5K2jojbq67HYJJmfY+IiP+VNBRYrDEWORBIWgO4DHiN7IsbZLs1DQV2j4gnq6pbO3OL1apwk6QryBaKANgrlS1DNpW/9iT1OO4WEUVcA3g62T6zVoK09vM4YCVgXbLlK39JtrLXgJAS55adJv9dFRHXV1ittucWq5UutVD3INv8G+A24NKuxnLqSlJj/Hgpsm/408m6aDcm28Jt6wJiurVforQ85hjgztwsYS9haW6xWvnSNmqTgNmpC21psm3jBkwXWkRsByDpMrK9UWekxxsBxxQUdh1JE3uo00DcbLxKb0TEm9n3xLev+RwwXw6t/5xYrXRddKGtwQDrQsvZoJFUASLiXklFTX55DvhxQee2hd0s6UhgqKQdyLbn+1Mvr7FBwF3BVrrB1IUm6XdkawT/NhV9BhhWxFKKA/2aynaTdrM5kNyWgMCvB9KQhvWPW6xWhcHUhfYF4Ktkm7tDdjlRURsQPFbQea0LETFP0m+BWyLigarrY+3DLVYrnaSTyGb/7g8cTNaFNisivltpxQoiaQlgA7IvDw+Usb6qpA+w8FrB53b7AuszSbsCJ5NtTbiOpNHA9z2WbU6sVro0K/iLDIIuNEnbAhPIWpMC1gI+HxG3FBjzPLKx62nMXys4vB9ra0maDGxPtnvSgB7SsL5xV7CVKq0xOjMiRpJtdD7Q/RjYsdFVmHae+R3ZDjtF2RwYNRC/qLSZtyJidmNII/Hv3OiougI2uETEXOABSWtXXZeSLJ4ff4uIB4HFC455L/DOgmMYzJT0abJ1oEekzcD/WnWlrHruCrbSSboFeD9wF9mMWWBgXmcp6SxgHgvOCh4SEQcUGPNGYDTZ7ze/CP+A+/1WKV1//V2yIQ3IhjSOi4jXq6uVtQMnViudpI90VR4RN5ddl6JJWhL4OvNXmboV+EVEvNH9qxY55qD5/VYlDWn8b2MhELM8J1YrjaSlgK8A6wEzgN9ExJxqa1W8KmYFW/EkXQ/sERGzq66LtRdPXrIyTQDeImu17QyMYv71nQNSV7OCJRUyK1jSXyLig5L+zYKTaBr7hC7X6piD3MvADEnXseCQhmdfD3JusVpp8pcipEUh7hroKwWlSzI+3XlWcEQUOSvYSiDp812VR8SEsuti7cUtVivT212gETGn02UKA9VCs4IlFTorWNKBEfGbTmUnRsThRcYdbJxArTtOrFamTSS9lO6LbPHylxjYXZWTJP2aBWcFTyo45p6SXo+I8wEknU62MbW1kKQZLHzd6myyf9/jIuKF8mtl7cBdwWYFqmhW8FBgInAWsBPwr4gY0GPZVUhLc84FLkhF+wJLA08DH4yI/6iqblYtJ1azAULSSrmHywJ/BP4CHA0QES9WUa+BqqvdhBplXtpwcHNXsFkBuukmfFtEbFxA2MkppnI/P5FuAO8pIOZgNkTSmIi4C0DSFsCQ9NyAv4zMuufEalaMXSqIuQ/weET8A96etbon2aU+x1RQn4Hui8BZkoaRfYl5CfiipGWAEyqtmVXKXcFmJZG0CvBCUYvjS5oCfCwiXpT0YeBCsm35RgMbRsReRcQd7CQtD+CFIqzBLVazAkjaCjgReBE4FjgPWAXokLR/RFxdQNghuXHUfYDxEXEpcKmkaQXEG5QkfTYifivp0E7lAETETyqpmLUNJ1azYpwGHAksD9wA7BwRd0gaSbZtXCGJVdJiaZnIjwLjcs/5//XWWSb9XLbSWljbclewWQEkTYuI0en+fRGxYe65qY2NsVsc87tkE5WeB9YGNo2IkLQeMCEitml1TDNbmL/FmhVjXu7+a52eK+TbbET8IC0MvzpwbW4st4NsrNVaQNIpPT3vtYLNidWsGI1VpvIrTJEeL1VU0Ii4o4uyB4uKN0hNTj+3IdtI4qL0eG9gViU1srbirmAzs36QdAfZCktz0uPFgVsjYqtqa2ZV66i6AmZmNbUikF/felgqs0HOXcFmZv1zIjBV0o1kXfwfxgtxGO4KNjPrN0nvBLZMD++MiKerrI+1B3cFm5n1g7IVIT4GbBIRfwSWkDSm4mpZG3CL1cysHySdQXZZ1fYRsaGkFckuc9qi4qpZxTzGambWP1umLeKmAkTEPyUtUXWlrHruCjYz65+3JA0hLfghaVUWXBjEBiknVjOz/jkF+APwDkk/INtU/vhqq2TtwGOsZmb9lDZV+CjZ5TbXR8R9FVfJ2oDHWM3M+kDSlsB4YF1gBnBgRHgpQ3ubu4LNzPrmdODbwMrAT4CfVlsdazdOrGZmfdMREddFxBsRcTGwatUVsvbirmAzs75ZQdIe3T2OiMsqqJO1EU9eMjPrA0ln9/B0RMQBpVXG2pITq5mZWQt5jNXMrB8kHSJpOWV+LWmKpB2rrpdVz4nVzKx/DoiIl4AdyWYIf45sKzkb5JxYzcz6R+nnJ4BzI2JmrswGMSdWM7P+mSzpWrLEeo2kZfFawYYnL5mZ9YukDmA08EhE/EvSysAaEXFPxVWzirnFambWPwGMAr6RHi8DLFVddaxduMVqZtYP3ujcuuOVl8zM+scbnVuX3BVsZtY/3ujcuuTEambWP11tdH5CtVWyduAxVjOzfvJG59YVJ1Yzs36QdF5EfK63Mht83BVsZtY/780/SOOtm1VUF2sjTqxmZn0g6QhJ/wY2lvSSpH+nx88Cf6y4etYG3BVsZtYPkk6IiCOqroe1HydWM7N+SEsafhpYJyKOlbQWsHpE3FVx1axiTqxmZv3glZesO155ycysf7zyknXJk5fMzPrHKy9Zl5xYzcz6p7Hy0mq5lZeOr7ZK1g48xmpm1k+5lZcAbvDKSwYeYzUzWxRLA43u4KEV18XahLuCzcz6QdLRwARgJWAV4GxJR1VbK2sH7go2M+sHSQ8Am0TE6+nxUGBaRGxQbc2sam6xmpn1z1PAUrnHSwJPVlQXayMeYzUz6wNJp5KNqc4GZkq6Lj3eAfCqS+auYDOzvpD0+Z6ej4gJZdXF2pMTq5mZWQu5K9jMrB8kjQBOAEaRG2uNiPdUVilrC568ZGbWP2cDZwBzgO2Ac4HfVlojawvuCjYz6wdJkyNiM0kzIuJ9+bKq62bVclewmVn/vJH2ZH1I0kFkl9oMq7hO1gbcYjUz6wdJWwD3ASsAxwLLAydFxB2VVswq58RqZmbWQu4KNjPrA0k/i4hvSvoTaS/WvIjYtYJqWRtxYjUz65vz0s8fVVoLa1vuCjYz6ydJqwJExHNV18Xah69jNTPrI0nHSHoeeAB4UNJzaRs5MydWM7O+kHQosA2wRUSsFBErAlsC20j6VrW1s3bgrmAzsz6QNBXYISKe71S+KnBtRLy/mppZu3CL1cysbxbvnFTh7XHWxSuoj7UZJ1Yzs755s5/P2SDhrmAzsz6QNBd4paungKUiwq3WQc6J1czMrIXcFWxmZtZCTqxmZmYt5MRqZmbWQk6sZmZmLeTEamZm1kL/HzXqyf6rO87aAAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "k = 9 #number of variables for heatmap\n",
        "cols = df.corr().nlargest(k, 'Outcome')['Outcome'].index\n",
        "cm = df[cols].corr()\n",
        "plt.figure(figsize=(10,6))\n",
        "sns.heatmap(cm, annot=True, cmap = 'viridis')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 517
        },
        "id": "ii3yDQLs5Mrd",
        "outputId": "a6cd341e-2d49-4911-d8a1-e555deb40fc1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f1b2da1efd0>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#How data impacts on the possibility of diabetes   \n",
        "for col in df.columns:\n",
        "    if col != \"Outcome\":\n",
        "        sns.catplot(\"Outcome\", col, data = df)"
      ],
      "metadata": {
        "id": "H6fWq8na6kLG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "b8715197-ab90-499d-9e75-15bd49bc9aa9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Based on visualization aboved, we see there are some outliers in the relationship between 8 variables and possibility of getting diabetes. \n",
        "2. Based on the heatmap, 'Glucose', 'BMI' and 'Insulin' are top 3 variables impact on the possibility of Diabetes. \n",
        "\n",
        "Thus, it's good to see how different variables correlates with each other. "
      ],
      "metadata": {
        "id": "YC3GmF4yM8tw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Data Distribution"
      ],
      "metadata": {
        "id": "CTJ4_JnmL0sa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## The impact of BMI and Insulin level on one's Glucose Level"
      ],
      "metadata": {
        "id": "fZV_kzqHUn34"
      }
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "-UDR3TOTU_4A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## ANOVA and Regression"
      ],
      "metadata": {
        "id": "Xw4qTkT5U6Me"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The Distribution of Glucose Values"
      ],
      "metadata": {
        "id": "ItymvGe2S2gZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "UbYir-YUcdee",
        "outputId": "215610d5-be10-4913-c1a4-034d787a0d3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
              "count   768.000000  768.000000     768.000000     768.000000  768.000000   \n",
              "mean      3.845052  120.894531      69.105469      20.536458   79.799479   \n",
              "std       3.369578   31.972618      19.355807      15.952218  115.244002   \n",
              "min       0.000000    0.000000       0.000000       0.000000    0.000000   \n",
              "25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n",
              "50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n",
              "75%       6.000000  140.250000      80.000000      32.000000  127.250000   \n",
              "max      17.000000  199.000000     122.000000      99.000000  846.000000   \n",
              "\n",
              "              BMI  DiabetesPedigreeFunction         Age     Outcome  \n",
              "count  768.000000                768.000000  768.000000  768.000000  \n",
              "mean    31.992578                  0.471876   33.240885    0.348958  \n",
              "std      7.884160                  0.331329   11.760232    0.476951  \n",
              "min      0.000000                  0.078000   21.000000    0.000000  \n",
              "25%     27.300000                  0.243750   24.000000    0.000000  \n",
              "50%     32.000000                  0.372500   29.000000    0.000000  \n",
              "75%     36.600000                  0.626250   41.000000    1.000000  \n",
              "max     67.100000                  2.420000   81.000000    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-687f490f-6b2c-45ee-a1f1-d154449de420\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.845052</td>\n",
              "      <td>120.894531</td>\n",
              "      <td>69.105469</td>\n",
              "      <td>20.536458</td>\n",
              "      <td>79.799479</td>\n",
              "      <td>31.992578</td>\n",
              "      <td>0.471876</td>\n",
              "      <td>33.240885</td>\n",
              "      <td>0.348958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.369578</td>\n",
              "      <td>31.972618</td>\n",
              "      <td>19.355807</td>\n",
              "      <td>15.952218</td>\n",
              "      <td>115.244002</td>\n",
              "      <td>7.884160</td>\n",
              "      <td>0.331329</td>\n",
              "      <td>11.760232</td>\n",
              "      <td>0.476951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.078000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>27.300000</td>\n",
              "      <td>0.243750</td>\n",
              "      <td>24.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>30.500000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>0.372500</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>140.250000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>127.250000</td>\n",
              "      <td>36.600000</td>\n",
              "      <td>0.626250</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>17.000000</td>\n",
              "      <td>199.000000</td>\n",
              "      <td>122.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>846.000000</td>\n",
              "      <td>67.100000</td>\n",
              "      <td>2.420000</td>\n",
              "      <td>81.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-687f490f-6b2c-45ee-a1f1-d154449de420')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-687f490f-6b2c-45ee-a1f1-d154449de420 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-687f490f-6b2c-45ee-a1f1-d154449de420');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#range of possible values in Glucose \n",
        "df_gluc = df[['Glucose','Outcome']]\n",
        "df_gluc.reset_index(inplace = True)\n",
        "df_gluc.drop(['index'], axis = 1, inplace = True)\n",
        "df_gluc = df_gluc.groupby(['Glucose']).count().reset_index()\n",
        "df_gluc.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "u1bSodRPLQUJ",
        "outputId": "41f83e0d-96d9-4519-fc52-4e529aa9fd83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Glucose     Outcome\n",
              "count  136.000000  136.000000\n",
              "mean   128.808824    5.647059\n",
              "std     41.416317    3.905418\n",
              "min      0.000000    1.000000\n",
              "25%     95.750000    3.000000\n",
              "50%    129.500000    5.000000\n",
              "75%    163.250000    8.000000\n",
              "max    199.000000   17.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aa4d1cd3-7fb8-4641-877e-cea73e151901\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Glucose</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>136.000000</td>\n",
              "      <td>136.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>128.808824</td>\n",
              "      <td>5.647059</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>41.416317</td>\n",
              "      <td>3.905418</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>95.750000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>129.500000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>163.250000</td>\n",
              "      <td>8.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>199.000000</td>\n",
              "      <td>17.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa4d1cd3-7fb8-4641-877e-cea73e151901')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-aa4d1cd3-7fb8-4641-877e-cea73e151901 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-aa4d1cd3-7fb8-4641-877e-cea73e151901');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_flattern_1 = []\n",
        "\n",
        "for i in range(len(df_gluc['Outcome'])):\n",
        "    for l in range(df_gluc.loc[i,'Outcome']):\n",
        "        df_flattern_1.append(df_gluc.loc[i,'Glucose'])\n",
        "\n",
        "df_gluc_pre = pd.DataFrame({\"Glucose\": df_flattern_1})\n",
        "\n",
        "print(sum(df_flattern_1)/len(df_flattern_1))\n",
        "print(len(df_flattern_1))\n",
        "print(\"median is\", df_gluc_pre.Glucose.median())\n",
        "df_gluc_pre.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 259
        },
        "id": "ugxGvWO1Lywv",
        "outputId": "dde30674-00bf-43ae-a358-f19ebc3cf0ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "120.89453125\n",
            "768\n",
            "median is 117.0\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Glucose\n",
              "0        0\n",
              "1        0\n",
              "2        0\n",
              "3        0\n",
              "4        0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-653e25d8-fb61-47e0-bfda-458dd2894f17\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Glucose</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-653e25d8-fb61-47e0-bfda-458dd2894f17')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-653e25d8-fb61-47e0-bfda-458dd2894f17 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-653e25d8-fb61-47e0-bfda-458dd2894f17');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The Distribution of BMI Values"
      ],
      "metadata": {
        "id": "Adzlt-_mSOmq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_bmi = df.loc[:,['BMI','Outcome']]\n",
        "df_bmi.reset_index(inplace = True)\n",
        "df_bmi.drop(['index'], axis = 1, inplace = True)\n",
        "df_bmi = df_bmi.groupby(['BMI']).count().reset_index()\n",
        "df_bmi.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "h5rA7qH6Svba",
        "outputId": "bf48cb99-6d05-4d33-f156-0ec1b7aa09d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              BMI     Outcome\n",
              "count  248.000000  248.000000\n",
              "mean    33.705645    3.096774\n",
              "std      9.080065    2.359988\n",
              "min      0.000000    1.000000\n",
              "25%     26.575000    1.000000\n",
              "50%     33.650000    2.000000\n",
              "75%     39.825000    4.000000\n",
              "max     67.100000   13.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e0d4b389-d146-4286-baff-c302eac68e09\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BMI</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>248.000000</td>\n",
              "      <td>248.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>33.705645</td>\n",
              "      <td>3.096774</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.080065</td>\n",
              "      <td>2.359988</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>26.575000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>33.650000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>39.825000</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>67.100000</td>\n",
              "      <td>13.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0d4b389-d146-4286-baff-c302eac68e09')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e0d4b389-d146-4286-baff-c302eac68e09 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e0d4b389-d146-4286-baff-c302eac68e09');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_flattern_2 = []\n",
        "\n",
        "for i in range(len(df_bmi['Outcome'])):\n",
        "    for l in range(df_bmi.loc[i,'Outcome']):\n",
        "        df_flattern_2.append(df_bmi.loc[i,'BMI'])\n",
        "\n",
        "df_bmi_pre = pd.DataFrame({\"BMI\": df_flattern_2})\n",
        "\n",
        "print(sum(df_flattern_2)/len(df_flattern_2))\n",
        "print(len(df_flattern_2))\n",
        "print(\"median is\", df_bmi_pre.BMI.median())\n",
        "df_bmi_pre.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 259
        },
        "id": "naclmhs3Vwcr",
        "outputId": "881d8d98-963a-4442-9379-74fc7fb814be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "31.992578124999977\n",
            "768\n",
            "median is 32.0\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   BMI\n",
              "0  0.0\n",
              "1  0.0\n",
              "2  0.0\n",
              "3  0.0\n",
              "4  0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-31a4e822-bfdf-40fe-bc74-4e87152241c1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BMI</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31a4e822-bfdf-40fe-bc74-4e87152241c1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-31a4e822-bfdf-40fe-bc74-4e87152241c1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-31a4e822-bfdf-40fe-bc74-4e87152241c1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## The Distribution of Insulin"
      ],
      "metadata": {
        "id": "Lhqky22KWjeJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_insu = df[['Insulin','Outcome']]\n",
        "df_insu.reset_index(inplace = True)\n",
        "df_insu.drop(['index'], axis = 1, inplace = True)\n",
        "df_insu = df_insu.groupby(['Insulin']).count().reset_index()\n",
        "df_insu.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "7d3zAFMwWuJ-",
        "outputId": "6cab6788-5582-47e4-9182-2f04a263c779"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Insulin  Outcome\n",
              "0        0      374\n",
              "1       14        1\n",
              "2       15        1\n",
              "3       16        1\n",
              "4       18        2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a4aab0e4-470f-4c82-9560-60536cea6ca7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Insulin</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>374</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>16</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>18</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a4aab0e4-470f-4c82-9560-60536cea6ca7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a4aab0e4-470f-4c82-9560-60536cea6ca7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a4aab0e4-470f-4c82-9560-60536cea6ca7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_flattern_3 = []\n",
        "\n",
        "for i in range(len(df_insu['Outcome'])):\n",
        "    for l in range(df_insu.loc[i,'Outcome']):\n",
        "        df_flattern_3.append(df_insu.loc[i,'Insulin'])\n",
        "\n",
        "df_insu_pre = pd.DataFrame({\"Insulin\": df_flattern_3})\n",
        "\n",
        "print(sum(df_flattern_3)/len(df_flattern_3))\n",
        "print(len(df_flattern_3))\n",
        "print(\"median is\", df_insu_pre.Insulin.median())\n",
        "df_insu_pre.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 259
        },
        "id": "z9QN_AU9Wml-",
        "outputId": "36716156-66cc-4bd8-83ec-136af5ea5cac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "79.79947916666667\n",
            "768\n",
            "median is 30.5\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Insulin\n",
              "0        0\n",
              "1        0\n",
              "2        0\n",
              "3        0\n",
              "4        0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-85ab0199-556b-4010-a1bb-0825d7add08c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Insulin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85ab0199-556b-4010-a1bb-0825d7add08c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-85ab0199-556b-4010-a1bb-0825d7add08c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-85ab0199-556b-4010-a1bb-0825d7add08c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Regression"
      ],
      "metadata": {
        "id": "7khK2SLSYtjC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_tr = pd.DataFrame({\"BMI\":  df_flattern_2,\n",
        "                      \"Insu\": df_flattern_3})\n",
        "\n"
      ],
      "metadata": {
        "id": "WdzxhB0de9DB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# get a regression analysis for the same anova table\n",
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "import scipy.special\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import statsmodels.api as sm\n",
        "from statsmodels.formula.api import ols\n",
        "\n",
        "df_all = pd.concat([df_bmi_pre, df_insu_pre, df_gluc_pre])\n",
        "X = df_tr[['BMI','Insu']]\n",
        "y = df_flattern_1\n",
        "\n",
        "reg = LinearRegression()\n",
        "reg.fit(X,y)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LmUEUr5wYso_",
        "outputId": "54635346-0295-4e2b-9c1c-6d019a08097b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Intercept\", reg.intercept_)\n",
        "print(\"Coefficient\")\n",
        "list(zip(X, reg.coef_))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QjdcnMaYYsyh",
        "outputId": "9f2d2679-1aeb-43e2-e143-fd963062c707"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Intercept 13.0518338985311\n",
            "Coefficient\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('BMI', 3.2245772339746486), ('Insu', 0.05864898270405665)]"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# model "
      ],
      "metadata": {
        "id": "q8wqqOQ0gm_x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#y = 13.05 + 3.22*BMI + 0.06*Insu"
      ],
      "metadata": {
        "id": "Dls3zLMtYs0-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## ANOVA\n"
      ],
      "metadata": {
        "id": "LCxWfMTHgR6H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#bin 1 low insulin, low BMI "
      ],
      "metadata": {
        "id": "5BEwcObIgVlE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.Insulin.median()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OlJLKSxBgljI",
        "outputId": "3e501388-7a21-4648-c83c-364a6fabb758"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "30.5"
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.BMI.median()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9yLjQ0zXhN4Q",
        "outputId": "42b01497-612a-429b-d126-cef2664deb0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "32.0"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_bin1 = df[(df.BMI <32) & (df.Insulin <30.5)\n",
        "                                         ].loc[:, ['Glucose', 'Outcome']]\n",
        "\n",
        "df_bin1.reset_index(inplace = True)\n",
        "\n",
        "df_bin1 = df_bin1.drop('index', axis = 1)\n",
        "\n",
        "print(df_bin1.describe())\n",
        "\n",
        "df_bin1 = df_bin1.groupby(['Glucose']).count().reset_index()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "26Bs0RHDhTHF",
        "outputId": "6254ef4d-1547-48f9-c654-92528fcf12c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          Glucose     Outcome\n",
            "count  208.000000  208.000000\n",
            "mean   114.105769    0.240385\n",
            "std     29.968395    0.428348\n",
            "min      0.000000    0.000000\n",
            "25%     95.500000    0.000000\n",
            "50%    111.000000    0.000000\n",
            "75%    129.000000    0.000000\n",
            "max    197.000000    1.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "bin1 = []\n",
        "\n",
        "for i in range(len(df_bin1['Outcome'])):\n",
        "    for l in range(df_bin1.loc[i,'Outcome']):\n",
        "        bin1.append(df_bin1.loc[i,'Glucose'])\n",
        "\n",
        "df_bin1_pre = pd.DataFrame({\"Glucose\": bin1})\n",
        "\n",
        "print(sum(bin1)/len(bin1))\n",
        "print(len(bin1))\n",
        "\n",
        "df_bin1_pre.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 242
        },
        "id": "-x_S_wpph6Xn",
        "outputId": "6141705e-3177-4480-af3a-a4af265e0aae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "114.10576923076923\n",
            "208\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Glucose\n",
              "0        0\n",
              "1        0\n",
              "2       44\n",
              "3       57\n",
              "4       68"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8a2a7856-df0a-4404-8672-8ebd6bb8109d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Glucose</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a2a7856-df0a-4404-8672-8ebd6bb8109d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8a2a7856-df0a-4404-8672-8ebd6bb8109d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8a2a7856-df0a-4404-8672-8ebd6bb8109d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#bin 2 low inulin, high BMI"
      ],
      "metadata": {
        "id": "rhSELkFegVrT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_bin2 = df[(df.BMI >=32) & (df.Insulin <30.5)\n",
        "                                         ].loc[:, ['Glucose', 'Outcome']]\n",
        "\n",
        "df_bin2.reset_index(inplace = True)\n",
        "\n",
        "df_bin2 = df_bin2.drop('index', axis = 1)\n",
        "\n",
        "print(df_bin2.describe())\n",
        "\n",
        "\n",
        "df_bin2 = df_bin2.groupby(['Glucose']).count().reset_index()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L4EDeXiFgmLC",
        "outputId": "a6ce427b-09db-438b-c64d-9668a8932fbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          Glucose     Outcome\n",
            "count  176.000000  176.000000\n",
            "mean   124.420455    0.511364\n",
            "std     35.872384    0.501297\n",
            "min      0.000000    0.000000\n",
            "25%    102.000000    0.000000\n",
            "50%    123.000000    1.000000\n",
            "75%    146.000000    1.000000\n",
            "max    199.000000    1.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bin2 = []\n",
        "\n",
        "for i in range(len(df_bin2['Outcome'])):\n",
        "    for l in range(df_bin2.loc[i,'Outcome']):\n",
        "        bin2.append(df_bin2.loc[i,'Glucose'])\n",
        "\n",
        "df_bin2_pre = pd.DataFrame({\"Glucose\": bin2})\n",
        "\n",
        "print(sum(bin2)/len(bin2))\n",
        "print(len(bin2))\n",
        "\n",
        "df_bin2_pre.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 242
        },
        "id": "xq3Efa0RimCQ",
        "outputId": "296f9fe8-7e50-431e-b973-7a75a6b1229a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "124.42045454545455\n",
            "176\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Glucose\n",
              "0        0\n",
              "1        0\n",
              "2        0\n",
              "3       57\n",
              "4       61"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-62fa79f7-4aba-48d7-8344-96dacfabe914\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Glucose</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>61</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-62fa79f7-4aba-48d7-8344-96dacfabe914')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-62fa79f7-4aba-48d7-8344-96dacfabe914 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-62fa79f7-4aba-48d7-8344-96dacfabe914');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "cF7x1yiGimLO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#bin 3 high insulin, low BMI"
      ],
      "metadata": {
        "id": "rYUo2M1ggVu6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_bin3 = df[(df.BMI <32) & (df.Insulin >=30.5)\n",
        "                                         ].loc[:, ['Glucose', 'Outcome']]\n",
        "\n",
        "df_bin3.reset_index(inplace = True)\n",
        "\n",
        "df_bin3 = df_bin3.drop('index', axis = 1)\n",
        "\n",
        "print(df_bin3.describe())\n",
        "\n",
        "df_bin3 = df_bin3.groupby(['Glucose']).count().reset_index()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ESMqZ3Dcgnfu",
        "outputId": "598e100b-806a-4095-a244-c5fb23a3d289"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          Glucose     Outcome\n",
            "count  165.000000  165.000000\n",
            "mean   117.187879    0.206061\n",
            "std     28.711260    0.405706\n",
            "min     56.000000    0.000000\n",
            "25%     96.000000    0.000000\n",
            "50%    110.000000    0.000000\n",
            "75%    136.000000    0.000000\n",
            "max    197.000000    1.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "bin3 = []\n",
        "\n",
        "for i in range(len(df_bin3['Outcome'])):\n",
        "    for l in range(df_bin3.loc[i,'Outcome']):\n",
        "        bin3.append(df_bin3.loc[i,'Glucose'])\n",
        "\n",
        "df_bin3_pre = pd.DataFrame({\"Glucose\": bin1})\n",
        "\n",
        "print(sum(bin3)/len(bin3))\n",
        "print(len(bin3))\n",
        "\n",
        "df_bin3_pre.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 242
        },
        "id": "XYvrUMA1jY9g",
        "outputId": "5880019d-b90c-425d-abaf-a3f3d8e9aec7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "117.18787878787879\n",
            "165\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Glucose\n",
              "0        0\n",
              "1        0\n",
              "2       44\n",
              "3       57\n",
              "4       68"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88529669-0bd0-4e7f-9d98-1950d5a5ef74\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Glucose</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88529669-0bd0-4e7f-9d98-1950d5a5ef74')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-88529669-0bd0-4e7f-9d98-1950d5a5ef74 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-88529669-0bd0-4e7f-9d98-1950d5a5ef74');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#bin 4 high insulin, high BMI"
      ],
      "metadata": {
        "id": "08s733MJgfu7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_bin4 = df[(df.BMI >=32) & (df.Insulin >=30.5)\n",
        "                                         ].loc[:, ['Glucose', 'Outcome']]\n",
        "\n",
        "df_bin4.reset_index(inplace = True)\n",
        "\n",
        "df_bin4 = df_bin4.drop('index', axis = 1)\n",
        "\n",
        "print(df_bin4.describe())\n",
        "\n",
        "df_bin4 = df_bin4.groupby(['Glucose']).count().reset_index()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jfNi7kbLgoGb",
        "outputId": "b683503f-babd-47f2-e5f2-b02540a4b36f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          Glucose     Outcome\n",
            "count  219.000000  219.000000\n",
            "mean   127.301370    0.429224\n",
            "std     31.385448    0.496099\n",
            "min     68.000000    0.000000\n",
            "25%    102.000000    0.000000\n",
            "50%    123.000000    0.000000\n",
            "75%    151.000000    1.000000\n",
            "max    198.000000    1.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bin4 = []\n",
        "\n",
        "for i in range(len(df_bin4['Outcome'])):\n",
        "    for l in range(df_bin4.loc[i,'Outcome']):\n",
        "        bin4.append(df_bin4.loc[i,'Glucose'])\n",
        "\n",
        "df_bin4_pre = pd.DataFrame({\"Glucose\": bin4})\n",
        "\n",
        "print(sum(bin4)/len(bin4))\n",
        "print(len(bin4))\n",
        "\n",
        "df_bin4_pre.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 242
        },
        "id": "lsKPsj6tkb0I",
        "outputId": "56431a40-e93d-4e9a-9ac8-1808955a0ea4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "127.3013698630137\n",
            "219\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Glucose\n",
              "0       68\n",
              "1       71\n",
              "2       74\n",
              "3       77\n",
              "4       77"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-06ee4485-be91-4c17-a4a7-a1ec7579bb8d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Glucose</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06ee4485-be91-4c17-a4a7-a1ec7579bb8d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-06ee4485-be91-4c17-a4a7-a1ec7579bb8d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-06ee4485-be91-4c17-a4a7-a1ec7579bb8d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_visual = pd.DataFrame({ \"Insulin\": ['Low']*(len(df_bin1_pre['Glucose']) +\n",
        "                                                        len(df_bin2_pre['Glucose'])) +\n",
        "                                            ['High']*(len(df_bin3_pre['Glucose']) +\n",
        "                                                        len(df_bin4_pre['Glucose']))\n",
        "                          ,\n",
        "                          \"BMI\": ['Low']*len(df_bin1_pre['Glucose']) +\n",
        "                                                       ['High']*len(df_bin2_pre['Glucose']) + \n",
        "                                                       ['Low']*len(df_bin3_pre['Glucose']) +\n",
        "                                                       ['High']*len(df_bin4_pre['Glucose'])\n",
        "                                                       ,\n",
        "                          \"Glucose_Level\":df_bin1_pre['Glucose'].values.tolist() +\n",
        "                                          df_bin2_pre['Glucose'].values.tolist() + \n",
        "                                          df_bin3_pre['Glucose'].values.tolist() + \n",
        "                                          df_bin4_pre['Glucose'].values.tolist()                                           \n",
        "                          })"
      ],
      "metadata": {
        "id": "59NmxndskqDB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_visual.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "SYBBl8LOkqLk",
        "outputId": "6e9a7875-8f6e-4e3f-c803-5a3d487e4a1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Insulin  BMI  Glucose_Level\n",
              "0     Low  Low              0\n",
              "1     Low  Low              0\n",
              "2     Low  Low             44\n",
              "3     Low  Low             57\n",
              "4     Low  Low             68"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c881f590-34bf-4ec7-9ee1-99a82bd9978f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>Glucose_Level</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Low</td>\n",
              "      <td>Low</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Low</td>\n",
              "      <td>Low</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Low</td>\n",
              "      <td>Low</td>\n",
              "      <td>44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Low</td>\n",
              "      <td>Low</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Low</td>\n",
              "      <td>Low</td>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c881f590-34bf-4ec7-9ee1-99a82bd9978f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c881f590-34bf-4ec7-9ee1-99a82bd9978f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c881f590-34bf-4ec7-9ee1-99a82bd9978f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(y='Glucose_Level', x=\"BMI\", hue = \"Insulin\",\n",
        "              data= df_visual)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "9U8jqrQWkqN-",
        "outputId": "874c74a3-4228-471f-b584-28ef2003b8ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f1b19515910>"
            ]
          },
          "metadata": {},
          "execution_count": 127
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# test normality"
      ],
      "metadata": {
        "id": "TgEGVl8hmQuH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#kolmogorov-smirnov, anderson-darling, wilks-shapiro etc for normal distribution\n",
        "\n",
        "from scipy.stats import anderson\n",
        "\n",
        "result1 = anderson(df_visual[(df_visual.BMI == 'Low') & (df_visual.Insulin == 'Low')].Glucose_Level,dist='norm')\n",
        "result2 = anderson(df_visual[(df_visual.BMI == 'High') & (df_visual.Insulin == 'Low')].Glucose_Level,dist='norm')\n",
        "result3 = anderson(df_visual[(df_visual.BMI == 'Low') & (df_visual.Insulin == 'High')].Glucose_Level,dist='norm')\n",
        "result4 = anderson(df_visual[(df_visual.BMI == 'High') & (df_visual.Insulin == 'High')].Glucose_Level,dist='norm')\n",
        "\n",
        "if result1[0] > result1[1][-3]:\n",
        "    print('The glucose level in bin1  is not normally distributed')\n",
        "else:\n",
        "    print('The glucose level in bin1 is noramlly distributed')\n",
        "if result2[0] > result2[1][-3]:\n",
        "    print('The glucose level in bin2 is not normally distributed')\n",
        "else:\n",
        "    print('The glucose level in bin2 is noramlly distributed')\n",
        "if result3[0] > result3[1][-3]:\n",
        "    print('The glucose level in bin3 is not normally distributed')\n",
        "else:\n",
        "    print('The glucose level in bin3 is noramlly distributed')\n",
        "if result4[0] > result4[1][-3]:\n",
        "    print('The glucose level in bin4 is not normally distributed')\n",
        "else:\n",
        "    print('The glucose level in bin4 is noramlly distributed')\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EgdVVx83nbgZ",
        "outputId": "66809e2a-b75f-4f35-e045-0b01d2917bc9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The glucose level in bin1  is not normally distributed\n",
            "The glucose level in bin2 is noramlly distributed\n",
            "The glucose level in bin3 is not normally distributed\n",
            "The glucose level in bin4 is not normally distributed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# test equal variance\n",
        "\n",
        "from scipy.stats import levene\n",
        "\n",
        "# Create three arrays for each sample:\n",
        "ctrl = df_visual[(df_visual.BMI == 'Low') & (df_visual.Insulin == 'Low')].Glucose_Level\n",
        "trt1 = df_visual[(df_visual.BMI == 'Low') & (df_visual.Insulin == 'High')].Glucose_Level\n",
        "trt2 = df_visual[(df_visual.BMI == 'High') & (df_visual.Insulin == 'Low')].Glucose_Level\n",
        "trt3 = df_visual[(df_visual.BMI == 'High') & (df_visual.Insulin == 'High')].Glucose_Level\n",
        "\n",
        "# Levene's Test in Python with Scipy:\n",
        "stat, p = levene(ctrl, trt1, trt2, trt3)\n",
        "\n",
        "print(stat, p)\n",
        "print(\"since p = 0.041 < 0.05\", \"the variances are not equal\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3DnwHwuRmQ2m",
        "outputId": "b78dd0b8-3e4f-4921-9860-be4b9d689147"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.759690350002595 0.04106326794775655\n",
            "since p = 0.041 < 0.05 the variances are not equal\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# continue anova because its robust"
      ],
      "metadata": {
        "id": "U5SjtK3fmQ6u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import statsmodels.api as sm\n",
        "from statsmodels.formula.api import ols\n",
        "\n",
        "# Ordinary Least Squares (OLS) model\n",
        "model = ols('Glucose_Level ~ C(BMI) + \\\n",
        "            C(Insulin)+ \\\n",
        "            C(BMI):C(Insulin)', data=df_visual).fit()"
      ],
      "metadata": {
        "id": "Bd2d04N-mRAt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "anova_table = sm.stats.anova_lm(model)\n",
        "anova_table"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "XF_em91epRcL",
        "outputId": "b5cb9d8e-a5aa-4c80-e86f-b5a8a252ef4c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       df        sum_sq       mean_sq          F    PR(>F)\n",
              "C(BMI)                1.0  2.029291e+04  20292.907088  19.699325  0.000010\n",
              "C(Insulin)            1.0  3.404532e+03   3404.531900   3.304947  0.069332\n",
              "C(BMI):C(Insulin)     1.0  1.083242e+02    108.324174   0.105156  0.745787\n",
              "Residual           1148.0  1.182592e+06   1030.132102        NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-69434b3f-4e38-4663-98ef-c7b105872112\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(BMI)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.029291e+04</td>\n",
              "      <td>20292.907088</td>\n",
              "      <td>19.699325</td>\n",
              "      <td>0.000010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C(Insulin)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>3.404532e+03</td>\n",
              "      <td>3404.531900</td>\n",
              "      <td>3.304947</td>\n",
              "      <td>0.069332</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C(BMI):C(Insulin)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1.083242e+02</td>\n",
              "      <td>108.324174</td>\n",
              "      <td>0.105156</td>\n",
              "      <td>0.745787</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>1148.0</td>\n",
              "      <td>1.182592e+06</td>\n",
              "      <td>1030.132102</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-69434b3f-4e38-4663-98ef-c7b105872112')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-69434b3f-4e38-4663-98ef-c7b105872112 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-69434b3f-4e38-4663-98ef-c7b105872112');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    }
  ]
}